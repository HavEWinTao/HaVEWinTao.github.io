<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>樊tastic~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-12T05:21:33.775Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>樊tastic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2337.移动片段得到字符串</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2337.%E7%A7%BB%E5%8A%A8%E7%89%87%E6%AE%B5%E5%BE%97%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2337.%E7%A7%BB%E5%8A%A8%E7%89%87%E6%AE%B5%E5%BE%97%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-07-11T05:15:27.000Z</published>
    <updated>2022-07-12T05:21:33.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动片段得到字符串">2337.移动片段得到字符串</h1><h2 id="题目描述">题目描述</h2><p>两个字符串start和target，长度均为n。每个字符串仅由字符'L'、'R'和'_'组成，其中：</p><pre><code>字符'L'和'R'表示片段，其中片段'L'只有在其左侧直接存在一个空位时才能向左 移动，而片段'R'只有在其右侧直接存在一个空位时才能向右移动字符'_'表示可以被任意'L'或'R'片段占据的空位如果在移动字符串start中的片段任意次之后可以得到字符串target，返回true；否则，返回false</code></pre><h2 id="解题思路">解题思路</h2><p>周赛题，最开始思路太乱了</p><p>对i从0~length做循环，i表示前i个字符已经一样了</p><p>如果start[i]和target[i]一样就看下一个字符</p><p>不一样的话根据target的字符情况，L、R、_进行讨论</p><p>如果是L，start只能从i的右侧来移动L过来</p><p>如果是R，因为左侧字符已经都一样了，直接返回false</p><p>如果是_，就只能将start的R右移才能出现_</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canChange</span><span class="params">(String start, String target)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> start.length();</span><br><span class="line">    start1 = start.toCharArray();</span><br><span class="line">    target1 = target.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (start1[i] == target1[i]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> target1[i];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'L'</span>) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; n &amp;&amp; start1[index] == <span class="string">'_'</span>) {</span><br><span class="line">                index++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (index == n) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (start1[index] == <span class="string">'R'</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                swap(index, i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'R'</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'_'</span>) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; n &amp;&amp; start1[index] == <span class="string">'R'</span>) {</span><br><span class="line">                index++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (index == n) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (start1[index] == <span class="string">'_'</span>) {</span><br><span class="line">                swap(i, index);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动片段得到字符串&quot;&gt;2337.移动片段得到字符串&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;两个字符串start和target，长度均为n。每个字符串仅由字符&#39;L&#39;、&#39;R&#39;和&#39;_&#39;组成，其中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字符&#39;L&#39;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2336.无限集中的最小数字</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2336.%E6%97%A0%E9%99%90%E9%9B%86%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2336.%E6%97%A0%E9%99%90%E9%9B%86%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2022-07-11T05:08:27.000Z</published>
    <updated>2022-07-12T05:13:41.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无限集中的最小数字">2336.无限集中的最小数字</h1><h2 id="题目描述">题目描述</h2><p>现有一个包含所有正整数的集合[1, 2, 3, 4, 5, ...]</p><p>实现SmallestInfiniteSet类：</p><pre><code>SmallestInfiniteSet()初始化SmallestInfiniteSet对象以包含所有正整数int popSmallest()移除并返回该无限集中的最小整数void addBack(int num)如果正整数num不存在于无限集中，则将一个num添加 到该无限集中</code></pre><h2 id="解题思路">解题思路</h2><p>用一个minExits表示原本集合中最小的数，初始化为1</p><p>用一个treemap保存后插入的数</p><p>根据情况分类</p><p>如删除最小整数，找到集合中小于minExits的最大整数，如果存在就删除set中的数，如果不存在就说明set中的数都大于minExits，就删除minExits</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">popSmallest</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (set.isEmpty()) {</span><br><span class="line">        ret = minExits++;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">temp</span> <span class="operator">=</span> set.floor(minExits);</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">null</span>) {</span><br><span class="line">            ret = set.pollFirst();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            ret = minExits++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>如果插入的数大于minExits就已经存在不用管</p><p>如果小于minExits，就放到set中（set会自动去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBack</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="keyword">if</span> (num &lt; minExits) {</span><br><span class="line">        set.add(num);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;无限集中的最小数字&quot;&gt;2336.无限集中的最小数字&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;现有一个包含所有正整数的集合[1, 2, 3, 4, 5, ...]&lt;/p&gt;
&lt;p&gt;实现SmallestInfiniteSet类：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2335.装满杯子需要的最短总时长</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2335.%E8%A3%85%E6%BB%A1%E6%9D%AF%E5%AD%90%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E7%9F%AD%E6%80%BB%E6%97%B6%E9%95%BF/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2335.%E8%A3%85%E6%BB%A1%E6%9D%AF%E5%AD%90%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E7%9F%AD%E6%80%BB%E6%97%B6%E9%95%BF/</id>
    <published>2022-07-11T05:04:27.000Z</published>
    <updated>2022-07-12T05:07:30.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装满杯子需要的最短总时长">2335.装满杯子需要的最短总时长</h1><h2 id="题目描述">题目描述</h2><p>现有一台饮水机，可以制备冷水、温水和热水。每秒钟，可以装满2杯不同类型的水或者1杯任意类型的水</p><p>一个整数数组amount，其中amount[0]、amount[1]和amount[2]分别表示需要装满冷水、温水和热水的杯子数量。返回装满所有杯子所需的最少秒数</p><h2 id="解题思路">解题思路</h2><p>简单题，但是感觉挺有意思</p><p>先排序，不能直接一步做完,因为哪个水需要的多或少是动态变化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fillCups</span><span class="params">(<span class="type">int</span>[] amount)</span> {</span><br><span class="line">    Arrays.sort(amount);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> amount[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> amount[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> amount[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) {</span><br><span class="line">        a--;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span> (c &gt; b) {</span><br><span class="line">            c--;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            b--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (c &gt; b) {</span><br><span class="line">        ans += c;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        ans += b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装满杯子需要的最短总时长&quot;&gt;2335.装满杯子需要的最短总时长&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;现有一台饮水机，可以制备冷水、温水和热水。每秒钟，可以装满2杯不同类型的水或者1杯任意类型的水&lt;/p&gt;
&lt;p&gt;一个整数数组amou</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>676.实现一个魔法字典</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/676.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AD%94%E6%B3%95%E5%AD%97%E5%85%B8/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/676.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AD%94%E6%B3%95%E5%AD%97%E5%85%B8/</id>
    <published>2022-07-11T04:59:27.000Z</published>
    <updated>2022-07-12T05:03:04.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现一个魔法字典">676.实现一个魔法字典</h1><h2 id="题目描述">题目描述</h2><p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词互不相同。如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p><p>实现 MagicDictionary 类：</p><pre><code>MagicDictionary()初始化对象void buildDict(String[] dictionary) 使用字符串数组dictionary设定该数据结构，dictionary中的字符串互不相同bool search(String searchWord)给定一个字符串searchWord，判定能否只将字符串中 一个字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回true；否则，返回false</code></pre><h2 id="解题思路">解题思路</h2><p>用一个map&lt;int,set&lt;string&gt;&gt;来保存这个长度的字符串</p><p>然后search时遍历该长度的set中的所有单词，如果只有一个字母不同则返回true，如果有两个不同了就继续找下一个单词，如果遍历完了set还没找到单词就返回false</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现一个魔法字典&quot;&gt;676.实现一个魔法字典&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;设计一个使用单词列表进行初始化的数据结构，单词列表中的单词互不相同。
如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>741.摘樱桃</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/741.%E6%91%98%E6%A8%B1%E6%A1%83/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/741.%E6%91%98%E6%A8%B1%E6%A1%83/</id>
    <published>2022-07-11T04:49:27.000Z</published>
    <updated>2022-07-12T04:57:45.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘樱桃">741.摘樱桃</h1><h2 id="题目描述">题目描述</h2><p>一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="6.784ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 2998.4 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1110.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(2110.4,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>的网格(grid) 代表了一块樱桃地，每个格子由以下三种数字的一种来表示：</p><pre><code>0表示这个格子是空的，所以你可以穿过它1表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它-1表示这个格子里有荆棘，挡着你的路</code></pre><p>你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：</p><p>从位置(0,0)出发，最后到达(N-1,N-1)，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）</p><p>当到达(N-1,N-1)后，你要继续走，直到返回到(0,0)，只能向上或向左走，并且只能穿越有效的格子</p><p>当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）</p><p>如果在(0,0)和(N-1,N-1)之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到</p><h2 id="解题思路">解题思路</h2><p>一个人从(0,0)走到(n-1,n-1),再从(n-1,n-1)走到(0,0)，相当于两个人同时从(0,0)走到(n-1,n-1)，每个人都可以向右或者向下</p><p>设两个人的坐标为A(x1,y1),B(x2,y2),则状态可表示为dp[x1][x2][y1][y2]，表示当前状态下的最大樱桃数量</p><p>若当前走了k次（k的取值范围是[0,2n-1),即从(0,0)走到(n-1,n-1)需要走2n-1步），则有x1+y1= x2+y2 = k，所以y1、y2都和k有关系，则上述状态可简化为dp[x1][x2][k]</p><p>为了方便，让A永远在B上方走，即x1&lt;=x2</p><p>分四种情况，A向下向右*B向下向右</p><p>同时应该判断下如果AB在同一个位置则只算他们摘到了一个樱桃</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摘樱桃&quot;&gt;741.摘樱桃&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个&lt;span class=&quot;math inline&quot;&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vert</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>648.单词替换</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/648.%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/648.%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/</id>
    <published>2022-07-11T04:42:27.000Z</published>
    <updated>2022-07-12T04:47:26.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单词替换">648.单词替换</h1><h2 id="题目描述">题目描述</h2><p>在英语中可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为继承词</p><p>例如，词根an，跟随着单词other(其他)，可以形成新的单词another(另一个)</p><p>给定一个由许多词根组成的词典dictionary和一个用空格分隔单词形成的句子sentence。将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它</p><p>输出替换之后的句子</p><h2 id="解题思路">解题思路</h2><p>用一个set先将所有的词根保存起来</p><p>将sentcen拆分成单词</p><p>取单词的所有词根，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="20.669ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9135.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2067.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2456.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3234.2,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4290,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4912.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(5968.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6266.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(6732.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7332.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(7809.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(8170.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(8746.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>将每一个词根和set判断词根是否在set中，如果是就替换然后进行下一个单词</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单词替换&quot;&gt;648.单词替换&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;在英语中可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为继承词&lt;/p&gt;
&lt;p&gt;例如，词根an，跟随着单词other(其他)，可以形成新的单词anot</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2327.知道秘密的人数</title>
    <link href="http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2327.%E7%9F%A5%E9%81%93%E7%A7%98%E5%AF%86%E7%9A%84%E4%BA%BA%E6%95%B0/"/>
    <id>http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2327.%E7%9F%A5%E9%81%93%E7%A7%98%E5%AF%86%E7%9A%84%E4%BA%BA%E6%95%B0/</id>
    <published>2022-07-05T03:32:27.000Z</published>
    <updated>2022-07-05T03:37:27.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知道秘密的人数">2327.知道秘密的人数</h1><h2 id="题目描述">题目描述</h2><p>在第1天，有一个人发现了一个秘密</p><p>一个整数delay，表示每个人会在发现秘密后的delay天之后，每天给一个新的人分享秘密</p><p>一个整数forget，表示每个人在发现秘密forget天之后会忘记这个秘密。一个人不能 在忘记秘密那一天及之后的日子里分享秘密</p><p>一个整数n，返回在第n天结束时，知道秘密的人数</p><p>由于答案可能会很大，将结果对<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="7.147ex" height="2.14ex" role="img" focusable="false" viewBox="0 -864 3159 946"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g><g data-mml-node="mo" transform="translate(1658.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2659,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></svg></mjx-container></span>取余后返回</p><h2 id="解题思路">解题思路</h2><p>统计第i天新增的人数，然后知道秘密的总人数其实就等于从最后一天往前推forget天的人数和</p><p>每一个第i天知道秘密的人，都对[i+delay,i+forget)这个区间有贡献，从前往后推即可,时间复杂度O(n^2)</p><p>（不知道我为啥陷入类似于斐波那契数列那种题的思路上去了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;知道秘密的人数&quot;&gt;2327.知道秘密的人数&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;在第1天，有一个人发现了一个秘密&lt;/p&gt;
&lt;p&gt;一个整数delay，表示每个人会在发现秘密后的delay天之后，每天给一个新的人分享秘密&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>2326.螺旋矩阵IV</title>
    <link href="http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2326.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5IV/"/>
    <id>http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2326.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5IV/</id>
    <published>2022-07-05T03:25:27.000Z</published>
    <updated>2022-07-05T03:31:14.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="螺旋矩阵iv">2326.螺旋矩阵IV</h1><h2 id="题目描述">题目描述</h2><p>两个整数：m和n，表示矩阵的维数</p><p>一个整数链表的头节点head</p><p>生成一个大小为mxn的螺旋矩阵，矩阵包含链表中的所有整数。链表中的整数从矩阵左上角开始、顺时针按螺旋顺序填充</p><p>如果还存在剩余的空格，则用-1填充</p><p>返回生成的矩阵</p><h2 id="解题思路">解题思路</h2><p>模拟</p><p>行进方向有四种，向右-&gt;向下-&gt;向左-&gt;向上</p><p>每次到达边界时边界都会产生相应的变化，如向右到达边界时上边界会发生变化</p><p>每走一格让head=head-&gt;next直到head为null，填充的值由val变成-1</p><p>(看别人代码怎么这么简洁,捂脸.jpg</p><p>将四个方向坐标的变化保存起来，然后四个方向不断循环</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;螺旋矩阵iv&quot;&gt;2326.螺旋矩阵IV&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;两个整数：m和n，表示矩阵的维数&lt;/p&gt;
&lt;p&gt;一个整数链表的头节点head&lt;/p&gt;
&lt;p&gt;生成一个大小为mxn的螺旋矩阵，矩阵包含链表中的所有整数。链</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>871.最低加油次数</title>
    <link href="http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/871.%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/"/>
    <id>http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/871.%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/</id>
    <published>2022-07-05T03:02:27.000Z</published>
    <updated>2022-07-05T03:22:11.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最低加油次数">871.最低加油次数</h1><h2 id="题目描述">题目描述</h2><p>汽车从起点出发驶向目的地，该目的地位于出发位置东面target英里处</p><p>沿途有加油站，每个station[i]代表一个加油站，它位于出发位置东面station[i][0]英里处，并且有station[i][1]升汽油</p><p>假设汽车油箱的容量是无限的，其中最初有startFuel升燃料。它每行驶1英里就会用掉1升汽油</p><p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中</p><p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回-1</p><p>如果汽车到达加油站时剩余燃料为0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为0，仍然认为它已经到达目的地</p><h2 id="解题思路">解题思路</h2><p>dp[i]表示加油i次的最大行驶英里数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> stations.length;</span><br><span class="line"><span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = startFuel;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; j--) {</span><br><span class="line">        <span class="keyword">if</span> (dp[j] &gt;= stations[i][<span class="number">0</span>]) {</span><br><span class="line">            dp[j + <span class="number">1</span>] = Math.max(dp[j + <span class="number">1</span>], dp[j] + stations[i][<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt;= target) {</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>加油站的位置已经是排好序的了，对每个加油站进行遍历</p><p>当走到加油站i时，他已经加了最多i次油，对加油的次数进行遍历i~0</p><p>如果加了j次油可以到达加油站i，那么就可以在这个加油站加油</p><p>遍历完成后，遍历dp找到第一个能够达到目的地的次数，就是最小加油次数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最低加油次数&quot;&gt;871.最低加油次数&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;汽车从起点出发驶向目的地，该目的地位于出发位置东面target英里处&lt;/p&gt;
&lt;p&gt;沿途有加油站，每个station[i]代表一个加油站，它位于出发位置东面</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>556.下一个更大元素III</title>
    <link href="http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/556.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0III/"/>
    <id>http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/556.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0III/</id>
    <published>2022-07-05T02:48:27.000Z</published>
    <updated>2022-07-05T04:59:15.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下一个更大元素iii">556.下一个更大元素III</h1><h2 id="题目描述">题目描述</h2><p>一个正整数n，请你找出符合条件的最小整数，其由重新排列n中存在的每位数字组成，并且其值大于n。如果不存在这样的正整数，则返回-1</p><p>返回的整数应当是一个32位整数，如果存在满足题意的答案，但不是32位整数，同样返回-1</p><h2 id="解题思路">解题思路</h2><p><a href="/2021/11/07/LeetCode刷题/31.下一个排列/index.html">31.下一个排列</a></p><p>先把数的每一位提取出来，转换成char[]</p><p>尽可能在靠右的低位进行交换</p><p>从右往左找到第一个不满足从右往左是递增的位置，这个位置的数记为num1</p><p>再从右往左找到第一个大于num1的数num2，下标为index</p><p>将这两个数交换</p><p>然后将index+1到末尾的这个区间内的数reverse，就是最小的</p><p>同时本题需要判断是否在int范围内，将char[]用long型累加，然后和Integer.MAX_VALUE做比较</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;下一个更大元素iii&quot;&gt;556.下一个更大元素III&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个正整数n，请你找出符合条件的最小整数，其由重新排列n中存在的每位数字组成，并且其值大于n。如果不存在这样的正整数，则返回-1&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>vs code-remote的使用</title>
    <link href="http://example.com/2022/07/01/%E5%85%B6%E4%BB%96/vs%20code-remote%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/07/01/%E5%85%B6%E4%BB%96/vs%20code-remote%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-01T13:34:27.000Z</published>
    <updated>2022-07-01T13:40:25.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vs-code-remote的使用">vs code-remote的使用</h1><p>在vs code中下载vs code remote插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host ubuntu-s1(主机名)</span><br><span class="line">    HostName 192.168.231.129(主机ip)</span><br><span class="line">    User fantastic(登录用户名)</span><br></pre></td></tr></table></figure><h2 id="免密登录">免密登录</h2><p>ssh-keygen -t rsa -C "邮箱"</p><p>生成的文件为$USER.ssh_rsa</p><p>将这个文件传到虚拟机中</p><p>进入到登录用户的.ssh文件夹中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> id_rsa.pub /root/.ssh/</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">sudo /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><p>这样就可以免密登录了</p><h2 id="开启root用户">开启root用户</h2><p>sever版的ubuntu初始化时不能创建root用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root(开启root用户)</span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>更改下面的设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vs-code-remote的使用&quot;&gt;vs code-remote的使用&lt;/h1&gt;
&lt;p&gt;在vs code中下载vs code remote插件&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>535.TinyURL的加密与解密</title>
    <link href="http://example.com/2022/07/01/LeetCode%E5%88%B7%E9%A2%98/535.TinyURL%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    <id>http://example.com/2022/07/01/LeetCode%E5%88%B7%E9%A2%98/535.TinyURL%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</id>
    <published>2022-07-01T13:24:27.000Z</published>
    <updated>2022-07-01T13:28:08.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tinyurl的加密与解密">535.TinyURL的加密与解密</h1><h2 id="题目描述">题目描述</h2><p>TinyURL是一种URL简化服务，比如：当你输入一个URL https://leetcode.com/problems/design-tinyurl 时，它将返回一个简化的URLhttp://tinyurl.com/4e9iAk。请你设计一个类来加密与解密TinyURL</p><p>加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL</p><h2 id="解题思路">解题思路</h2><p>用两个map</p><ol type="1"><li>tinyurl到原始url的映射map1</li><li>原始url到tinyurl的映射map2</li></ol><p>decode的话是查询map1就行了</p><p>encode的话就是生成一个随机的url，然后保存到map1和map2中去</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tinyurl的加密与解密&quot;&gt;535.TinyURL的加密与解密&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;TinyURL是一种URL简化服务，比如：当你输入一个URL https://leetcode.com/problems/desi</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>324.摆动排序II</title>
    <link href="http://example.com/2022/07/01/LeetCode%E5%88%B7%E9%A2%98/324.%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8FII/"/>
    <id>http://example.com/2022/07/01/LeetCode%E5%88%B7%E9%A2%98/324.%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8FII/</id>
    <published>2022-07-01T13:07:27.000Z</published>
    <updated>2022-07-01T13:23:18.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摆动排序ii">324.摆动排序II</h1><h2 id="题目描述">题目描述</h2><p>一个整数数组nums，将它重新排列成<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="41.53ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18356.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2519,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2797,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3297,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3852.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(4908.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5508.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6080.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6958.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(7427.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(7705.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8205.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mstyle" transform="translate(8483.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(8705.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9305.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9877.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10755.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(11224.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(11502.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(12002.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(12558.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(13614.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14214.1,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14786.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15664.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(16133.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(16411.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(16911.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(17189.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(17633.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(18078.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container></span>的顺序。</p><p>可以假设所有输入数组都可以得到满足题目要求的结果。</p><h2 id="解题思路">解题思路</h2><ol type="1"><li><p>找中位数</p></li><li><p>将数组分为小于x 等于x 大于x的三个部分</p></li></ol><p>这个摆动数组，下标从0开始，奇数位是比较大的，偶数位是比较小的</p><p>因为奇数位是比较大的，可以从右往左放比较大的数，先统一放奇数位</p><p>然后从左往右放较小的数，放到偶数位上，这样比较小</p><p>数组越靠左都是比中位数大的，这样放偶数位时候左面接近中位数，右面比较小</p><p>因为奇数位左面大于中位数，右面接近中位数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摆动排序ii&quot;&gt;324.摆动排序II&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个整数数组nums，将它重新排列成&lt;span class=&quot;math inline&quot;&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>241.为运算表达式设计优先级</title>
    <link href="http://example.com/2022/07/01/LeetCode%E5%88%B7%E9%A2%98/241.%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://example.com/2022/07/01/LeetCode%E5%88%B7%E9%A2%98/241.%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2022-07-01T12:56:27.000Z</published>
    <updated>2022-07-01T13:06:56.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为运算表达式设计优先级">241.为运算表达式设计优先级</h1><h2 id="题目描述">题目描述</h2><p>一个由数字和运算符组成的字符串expression，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。可以按任意顺序返回答案</p><p>生成的测试用例满足其对应输出值符合32位整数范围，不同结果的数量不超过<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.022ex" role="img" focusable="false" viewBox="0 -871.8 1436.6 893.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="27.638ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 12215.8 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2299.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(2871.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(3374.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3825.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(4291.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(4760.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(5229.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5574.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6059.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6659.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(7104.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(7402.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(7868.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8468.2,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(8945.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(9306.2,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(10160,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(11215.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span></p><p>expression由数字和算符'+'、'-'和'*'组成</p><p>输入表达式中的所有整数值在范围[0,99]</p><h2 id="解题思路">解题思路</h2><p>我感觉这个题有hard难度了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">diffWaysToCompute</span><span class="params">(String expression)</span> {</span><br><span class="line">        <span class="keyword">if</span> (expression == <span class="literal">null</span> || expression.length() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span>[] chars = expression.toCharArray();</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">aChar</span> <span class="operator">=</span> chars[i];</span><br><span class="line">            <span class="keyword">if</span> (!Character.isDigit(aChar)) {</span><br><span class="line">                List&lt;Integer&gt; leftList = diffWaysToCompute(expression.substring(<span class="number">0</span>, i));</span><br><span class="line">                List&lt;Integer&gt; rightList = diffWaysToCompute(expression.substring(i + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (Integer left : leftList) {</span><br><span class="line">                    <span class="keyword">for</span> (Integer right : rightList) {</span><br><span class="line">                        <span class="keyword">if</span> (aChar == <span class="string">'+'</span>) {</span><br><span class="line">                            ans.add(left + right);</span><br><span class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span> (aChar == <span class="string">'-'</span>) {</span><br><span class="line">                            ans.add(left - right);</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            ans.add(left * right);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (ans.isEmpty()) {</span><br><span class="line">            ans.add(Integer.valueOf(expression));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br></pre></td></tr></table></figure><p>使用递归的方法，如果expression是null或长度为0的话就返回空的list</p><p>然后遍历整个字符串，碰到运算符就将两边分开，将两侧进行DFS</p><p>最后的一步是将其转换成数字的，如果再dfs过程中expression中没有运算符，那么ans就为空，为空的话就表示她是一个数，然后将他转换成一个数，这样就可以向上传递，作为一个整数了，参与符号运算</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为运算表达式设计优先级&quot;&gt;241.为运算表达式设计优先级&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个由数字和运算符组成的字符串expression，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。可以按任意顺序返回答案&lt;/</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="DFS" scheme="http://example.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>OfferII.91.粉刷房子</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.91.%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.91.%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/</id>
    <published>2022-06-27T02:32:27.000Z</published>
    <updated>2022-06-27T02:37:13.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="offerii.91.粉刷房子">OfferII.91.粉刷房子</h1><h2 id="题目描述">题目描述</h2><p>假如有一排房子，共n个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同</p><p>每个房子粉刷成不同颜色的花费是以一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 2322.4 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span>的正整数矩阵costs来表示</p><p>例如，costs[0][0]表示第0号房子粉刷成红色的成本花费；costs[1][2]表示第1号房子粉刷成绿色的花费，以此类推</p><p>请计算出粉刷完所有房子最少的花费成本</p><h2 id="解题思路">解题思路</h2><p>第i号房子和第i-1号房子的颜色必须不同，因此当第i号房子被粉刷成某一种颜色时，第i−1号房子只能被粉刷成另外两种颜色之一</p><p>当第i号房子分别被粉刷成三种颜色时，粉刷第0号房子到第i号房子的最小花费成本计算如下：</p><pre><code>dp[i][0]=min(dp[i−1][1],dp[i−1][2])+costs[i][0]dp[i][1]=min(dp[i−1][0],dp[i−1][2])+costs[i][1]dp[i][2]=min(dp[i−1][0],dp[i−1][1])+costs[i][2]</code></pre><p>三种颜色的情况可以合并为一个状态转移方程，对于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="11.064ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4890.1 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(2611.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3234.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(4290.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>和0&lt;=j&lt;3，状态转移方程如下：</p><pre><code>dp[i][j]=min(dp[i−1][(j+1)mod3],dp[i−1][(j+2)mod3])+costs[i][j]</code></pre><p>计算结束时，dp[n−1]中的最小值即为粉刷所有房子的最小花费成本</p><p>当i&gt;=1时，由于dp[i]的计算只和dp[i−1]有关，因此可以使用滚动数组优化空间，将空间复杂度降低到O(1)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;offerii.91.粉刷房子&quot;&gt;OfferII.91.粉刷房子&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;假如有一排房子，共n个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，需要粉刷所有的房子并且使其相邻的两个房子颜色不能</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>OfferII.29.排序的循环链表</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.29.%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.29.%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</id>
    <published>2022-06-27T02:21:27.000Z</published>
    <updated>2022-06-27T02:31:20.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="offerii.29.排序的循环链表">OfferII.29.排序的循环链表</h1><h2 id="题目描述">题目描述</h2><p>给定循环单调非递减列表中的一个点，写一个函数向这个列表中插入一个新元素insertVal，使这个列表仍然是循环升序的</p><p>给定的可以是这个列表中任意一个顶点的指针，并不一定是这个列表中最小元素的指针</p><p>如果有多个满足条件的插入位置，可以选择任意一个位置插入新的值，插入后整个列表仍然保持有序</p><p>如果列表为空（给定的节点是null），需要创建一个循环有序列表并返回这个节点。否则。请返回原先给定的节点</p><h2 id="解题思路">解题思路</h2><p>对于只有一个结点或链表为空的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) {</span><br><span class="line">    insertNode.next = insertNode;</span><br><span class="line">    <span class="keyword">return</span> insertNode;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (head.next == head) {</span><br><span class="line">    head.next = insertNode;</span><br><span class="line">    insertNode.next = head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>对于常规情况，应该找到结点插入的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">Node</span> <span class="variable">cursor</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span> (cursor != head) {</span><br><span class="line">    <span class="keyword">if</span> (insertVal &gt;= parent.val &amp;&amp; insertVal &lt;= cursor.val) {</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (parent.val &gt; cursor.val) {</span><br><span class="line">        <span class="keyword">if</span> (insertVal &gt; parent.val || insertVal &lt; cursor.val) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    parent = parent.next;</span><br><span class="line">    cursor = cursor.next;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>插入的结点应该在parent后面，parent总是在cursor前一个，如果parent&lt;=insert&lt;=cursor,parent就是插入位置</p><p>但是这是常规情况，如果insert比原链表的最大值大或比最小值小呢，找到链表的末尾(parent&gt;cursor),然后做判断，可以得到插入位置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;offerii.29.排序的循环链表&quot;&gt;OfferII.29.排序的循环链表&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定循环单调非递减列表中的一个点，写一个函数向这个列表中插入一个新元素insertVal，使这个列表仍然是循环升序的&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2311.小于等于K的最长二进制子序列</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/2311.%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EK%E7%9A%84%E6%9C%80%E9%95%BF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/2311.%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EK%E7%9A%84%E6%9C%80%E9%95%BF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2022-06-27T02:07:27.000Z</published>
    <updated>2022-06-27T02:19:32.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小于等于k的最长二进制子序列">2311.小于等于K的最长二进制子序列</h1><h2 id="题目描述">题目描述</h2><p>一个二进制字符串s和一个正整数k</p><p>返回s的最长子序列，且该子序列对应的二进制数字小于等于k</p><p>注意：</p><pre><code>子序列可以有前导0空字符串视为0子序列是指从一个字符串中删除零个或者多个字符后，不改变顺序得到的剩余字符序列</code></pre><h2 id="解题思路">解题思路</h2><p>这题过了，但是写麻烦了，只能说代码又臭又长，时间复杂度还高</p><p>前面的0都可以保留，然后找到一个1的位置，判断以该位置为起始位置的子串能保留多少位(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>)</p><hr><p><strong>只有1才对数的大小做贡献</strong></p><p>为什么从后往前遍历呢？因为后位的1的贡献一定把比前位的1的贡献小，即使后位选上后导致前位不能选，也不会对结果产生影响</p><pre><code>如：s="0111000"，k是17，从后往前遍历，8选上了，这样的话16就不能选了，但是对答案没影响再如：s="0011111",k=17,从后往前遍历，1,2,4,8都选上了，这样的最后答案中1的位数比单选16和8要多</code></pre><p>从低位到高位遍历s（反向遍历s），记需要移除的1的个数为removed：</p><p>若当前位为0，可保留；</p><p>若当前位为1，分类判断：</p><pre><code>计入当前位1，数字总和依然&lt;=k，可保留；计入当前位1，数字总和&gt;k，不可保留，removed+1</code></pre><p>最终返回s的总长度减去需要删除的1的个数，即len(s)−removed</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小于等于k的最长二进制子序列&quot;&gt;2311.小于等于K的最长二进制子序列&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个二进制字符串s和一个正整数k&lt;/p&gt;
&lt;p&gt;返回s的最长子序列，且该子序列对应的二进制数字小于等于k&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="贪心" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>710.黑名单中的随机数</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/710.%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/710.%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2022-06-27T01:51:27.000Z</published>
    <updated>2022-06-27T02:03:41.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑名单中的随机数">710.黑名单中的随机数</h1><h2 id="题目描述">题目描述</h2><p>给定一个整数n和一个无重复黑名单整数数组blacklist</p><p>设计一种算法，从[0,n-1]范围内的任意整数中选取一个未加入黑名单blacklist的整数</p><p>任何在上述范围内且不在黑名单blacklist中的整数都应该有同等的可能性被返回</p><p>优化你的算法，使它最小化调用语言内置随机函数的次数</p><p>实现Solution类:</p><pre><code>Solution(int n, int[] blacklist)初始化整数n和被加入黑名单blacklist的整数int pick()返回一个范围为[0,n-1]且不在黑名单blacklist中的随机整数</code></pre><h2 id="解题思路">解题思路</h2><p>一个整数n,一个黑名单，黑名单中所有数都小于n，并且黑名单中所有数都不相同</p><p>假设黑名单中数字的个数为m，那么能够返回的数一共有n-m个</p><p>因为要优化调用随机函数的次数，可以将所有的数映射到[0~n-m）的区间上，这样调用一次random就可以返回符合条件的随机数了</p><p>用一个map，key是[0~n-m)，value是要对应的随机数</p><p>构建map：</p><pre><code>对于不在黑名单中的数，value=key对于在黑名单中的数，如果该数大于n-m就可以忽略了，存到set中如果该数小于n-m应该把这个数映射成[n-m,n)中不是黑名单的数，用set判断因为黑名单数量m和n是确定的，一一映射后能够保持随机性</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pick</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(bound);</span><br><span class="line">    <span class="keyword">return</span> b2w.getOrDefault(x, x);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;黑名单中的随机数&quot;&gt;710.黑名单中的随机数&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个整数n和一个无重复黑名单整数数组blacklist&lt;/p&gt;
&lt;p&gt;设计一种算法，从[0,n-1]范围内的任意整数中选取一个未加入黑名单bla</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>522.最长特殊序列II</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/522.%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97II/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/522.%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97II/</id>
    <published>2022-06-27T01:34:27.000Z</published>
    <updated>2022-06-27T01:49:52.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长特殊序列ii">522.最长特殊序列II</h1><h2 id="题目描述">题目描述</h2><p>给定字符串列表strs，返回其中最长的特殊序列。如果最长特殊序列不存在，返回-1</p><p>特殊序列定义如下：</p><pre><code>该序列为某字符串独有的子序列（即不能是其他字符串的子序列）</code></pre><p>s的子序列可以通过删去字符串s中的某些字符实现</p><h2 id="解题思路">解题思路</h2><p>对于字符串i来说，如果他不是所有其他字符串的子串，那么他就是一个特殊字符串</p><p>对于strs中的所有字符串，走一遍遍历，就可以判断出最长的特殊序列</p><p>怎么判断字符串s是不是字符串t的子串呢，如果s是t的子串，那么s中的所有字符都会在t中按顺序出现</p><p>双指针，如果指向s中的字母和当前指向t的字母不相同，那t的指针后移，如果相同那么s和t都后移</p><p>最后判断指向s的指针是否在s末尾了，如果再末尾了就证明是子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断s是否是t的子串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubseq</span><span class="params">(String s, String t)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">ptS</span> <span class="operator">=</span> <span class="number">0</span>, ptT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptS &lt; s.length() &amp;&amp; ptT &lt; t.length()) {</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(ptS) == t.charAt(ptT)) {</span><br><span class="line">            ++ptS;</span><br><span class="line">        }</span><br><span class="line">        ++ptT;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">return</span> <span class="variable">ptS</span> <span class="operator">=</span>= s.length();</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最长特殊序列ii&quot;&gt;522.最长特殊序列II&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定字符串列表strs，返回其中最长的特殊序列。如果最长特殊序列不存在，返回-1&lt;/p&gt;
&lt;p&gt;特殊序列定义如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>515.在每个树行中找最大值</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/515.%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/515.%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-06-27T01:32:27.000Z</published>
    <updated>2022-06-27T01:33:41.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在每个树行中找最大值">515.在每个树行中找最大值</h1><h2 id="题目描述">题目描述</h2><p>给定一棵二叉树的根节点root ，请找出该二叉树中每一层的最大值</p><h2 id="解题思路">解题思路</h2><p>BFS，遍历每层的时候记录最大值，记录到ans中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在每个树行中找最大值&quot;&gt;515.在每个树行中找最大值&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一棵二叉树的根节点root ，请找出该二叉树中每一层的最大值&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;BFS，遍</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
