<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>樊tastic~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-24T08:45:36.575Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>樊tastic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OfferII.115.重建序列</title>
    <link href="http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/OfferII.115.%E9%87%8D%E5%BB%BA%E5%BA%8F%E5%88%97/"/>
    <id>http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/OfferII.115.%E9%87%8D%E5%BB%BA%E5%BA%8F%E5%88%97/</id>
    <published>2022-07-24T08:37:27.000Z</published>
    <updated>2022-07-24T08:45:36.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="offerii.115.重建序列">OfferII.115.重建序列</h1><h2 id="题目描述">题目描述</h2><p>给定一个长度为n的整数数组nums，其中nums是范围为[1，n]的整数的排列。还提供了一个2D整数数组sequences，其中sequences[i]是nums的子序列</p><p>检查nums是否是唯一的最短超序列。最短超序列是长度最短的序列，并且所有序列sequences[i]都是它的子序列。对于给定的数组sequences，可能存在多个有效的超序列</p><p>例如，对于sequences=[[1,2],[1,3]]，有两个最短的超序列，[1,2,3]和[1,3,2]</p><p>而对于sequences=[[1,2],[1,3],[1,2,3]]，唯一可能的最短超序列是[1,2,3]。[1,2,3,4]是可能的超序列，但不是最短的</p><p>如果nums是序列的唯一最短超序列，则返回true，否则返回false</p><p>子序列是一个可以通过从另一个序列中删除一些元素或不删除任何元素，而不改变其余元素的顺序的序列</p><h2 id="解题思路">解题思路</h2><p>题目中需要注意nums并不是说唯一的排列[1,2,...,n],而是一个1~n的随机全排列</p><ol type="1"><li><p>题目中每一个sequence都一定是nums的子序列，这样就不存在sequence间冲突的问题</p></li><li><p>一共有n个元素，相当于建立一个图,对于每个sequence会对树贡献一部分，如[1,2,3]会有1-&gt;2和2-&gt;3的有向边，因为<strong>点1</strong>，所以图中一定不存在环</p></li></ol><p>如果最后图能唯一确定nums[0]-&gt;nums[1],nums[1]-&gt;nums[2],...,nums[n-2]-&gt;nums[n-1]的一条通路，那么就说明可以唯一确定一条超序列并且这个超序列就是nums</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;offerii.115.重建序列&quot;&gt;OfferII.115.重建序列&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个长度为n的整数数组nums，其中nums是范围为[1，n]的整数的排列。还提供了一个2D整数数组sequences，其</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>814.二叉树剪枝</title>
    <link href="http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/814.%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/"/>
    <id>http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/814.%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/</id>
    <published>2022-07-24T08:31:27.000Z</published>
    <updated>2022-07-24T08:34:36.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树剪枝">814.二叉树剪枝</h1><h2 id="题目描述">题目描述</h2><p>给你二叉树的根结点root ，此外树的每个结点的值要么是0，要么是1</p><p>返回移除了所有不包含1的子树的原二叉树</p><p>节点node的子树为node本身加上所有node的后代</p><h2 id="解题思路">解题思路</h2><p>剪枝肯东是从根节点开始剪的，如果说一个结点是叶子结点，并且他的值是0，那就应该将这个结点剪去（设置为null），这样这个结果会向上传递</p><p>最终对整棵树完成剪枝</p><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">pruneTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    root.left = pruneTree(root.left);</span><br><span class="line">    root.right = pruneTree(root.right);</span><br><span class="line">    <span class="keyword">if</span> (root.val == <span class="number">0</span> &amp;&amp; root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二叉树剪枝&quot;&gt;814.二叉树剪枝&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你二叉树的根结点root ，此外树的每个结点的值要么是0，要么是1&lt;/p&gt;
&lt;p&gt;返回移除了所有不包含1的子树的原二叉树&lt;/p&gt;
&lt;p&gt;节点node的子树为</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>757.设置交集大小至少为2</title>
    <link href="http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/757.%E8%AE%BE%E7%BD%AE%E4%BA%A4%E9%9B%86%E5%A4%A7%E5%B0%8F%E8%87%B3%E5%B0%91%E4%B8%BA2/"/>
    <id>http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/757.%E8%AE%BE%E7%BD%AE%E4%BA%A4%E9%9B%86%E5%A4%A7%E5%B0%8F%E8%87%B3%E5%B0%91%E4%B8%BA2/</id>
    <published>2022-07-24T08:19:27.000Z</published>
    <updated>2022-07-24T08:31:01.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置交集大小至少为2">757.设置交集大小至少为2</h1><h2 id="题目描述">题目描述</h2><p>一个整数区间[a,b](a&lt;b)代表着从a到b的所有连续整数，包括a和b</p><p>一组整数区间intervals，请找到一个最小的集合S，使得S里的元素与区间intervals中的每一个整数区间都至少有2个元素相交</p><p>输出这个最小集合S的大小</p><h2 id="解题思路">解题思路</h2><p>点集并不一定是连续点</p><p>对intervals进行排序，intervals[0]升序，inervals[1]降序，然后从后向前进行遍历</p><p>对intervals[0]升序和对intervals[1]降序的效果是这样的，如</p><p>[2,7],[2,6],[2,5]，那么对于这段就相当于集合中加了(2,3)</p><p>记录了区间左端，那对于左端相同这些都是两个数，这些对答案的总贡献为2</p><p>还有种情况如</p><p>[2,6],[10,16],[10,14],这个区间段与上个区间段完全不重合，那就得更新区间左端，这个区间对答案的贡献为2</p><p>那还有种情况就是[2,6],[6,8],这种区间对答案的贡献为1，同时也需要更新区间左端</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置交集大小至少为2&quot;&gt;757.设置交集大小至少为2&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个整数区间[a,b](a&amp;lt;b)代表着从a到b的所有连续整数，包括a和b&lt;/p&gt;
&lt;p&gt;一组整数区间intervals，请找到一个最小</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>739.每日温度</title>
    <link href="http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
    <id>http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</id>
    <published>2022-07-24T08:11:27.000Z</published>
    <updated>2022-07-24T08:18:38.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每日温度">739.每日温度</h1><h2 id="题目描述">题目描述</h2><p>给定一个整数数组temperatures，表示每天的温度，返回一个数组answer，其中answer[i]是指对于第i天，下一个更高温度出现在几天后</p><p>如果气温在这之后都不会升高，请在该位置用0 来代替</p><h2 id="解题思路">解题思路</h2><p>用一个栈来存下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">stack.add(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> temperatures[index];</span><br><span class="line">        <span class="keyword">if</span> (temperatures[i] &gt; top) {</span><br><span class="line">            ans[index] = i - index;</span><br><span class="line">            stack.pop();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">while</span> (!stack.isEmpty());</span><br><span class="line">    stack.add(i);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>先将第一个天的下标0放进栈使栈不为空</p><p>遍历剩余所有的天数</p><p>如果说当前天的温度比栈顶的温度高，移除栈顶元素，并将栈顶元素天数的ans更新，否则跳出循环</p><p>将当前天的下标放入栈</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;每日温度&quot;&gt;739.每日温度&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个整数数组temperatures，表示每天的温度，返回一个数组answer，其中answer[i]是指对于第i天，下一个更高温度出现在几天后&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>406.根据身高重建队列</title>
    <link href="http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/406.%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/406.%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</id>
    <published>2022-07-24T08:04:27.000Z</published>
    <updated>2022-07-24T08:09:45.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据身高重建队列">406.根据身高重建队列</h1><h2 id="题目描述">题目描述</h2><p>假设有打乱顺序的一群人站成一个队列，数组people表示队列中一些人的属性（不一定按顺序）。每个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="17.437ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7707.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(969,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1454,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1957,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2255,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2721,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2999,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3344,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3899.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4955.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(5233.6,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6136.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6581.2,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7429.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>表示第i个人的身高为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.043ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 903 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>，前面正好有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.918ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 848 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>个身高大于或等于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.043ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 903 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>的人</p><p>重新构造并返回输入数组people所表示的队列。返回的队列应该格式化为数组queue，其中<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="17.384ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 7683.9 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(460,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1032,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1498,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2070,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2536,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2814,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3226,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3781.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4837.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(5115.6,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(6065.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6510.6,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(7405.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>是队列中第j个人的属性（queue[0]是排在队列前面的人）</p><h2 id="解题思路">解题思路</h2><p>将身高从小到大排序，身高相同的话<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.918ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 848 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>也按从小到大排序</p><p>将身高从小到大排序后后放置的人对先放置的人不产生影响</p><p>因为是大于等于，所以得找空位和身高相等的，找位置，从小到大找到每个人所在的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> people.length;</span><br><span class="line"><span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] person : people) {</span><br><span class="line">    <span class="type">int</span> <span class="variable">spaces</span> <span class="operator">=</span> person[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (ans[i] == <span class="literal">null</span> || ans[i][<span class="number">0</span>] == person[<span class="number">0</span>]) {</span><br><span class="line">            --spaces;</span><br><span class="line">            <span class="keyword">if</span> (spaces == <span class="number">0</span>) {</span><br><span class="line">                ans[i] = person;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;根据身高重建队列&quot;&gt;406.根据身高重建队列&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;假设有打乱顺序的一群人站成一个队列，数组people表示队列中一些人的属性（不一定按顺序）。每个&lt;span class=&quot;math inline&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>394.字符串解码</title>
    <link href="http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/394.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/"/>
    <id>http://example.com/2022/07/24/LeetCode%E5%88%B7%E9%A2%98/394.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/</id>
    <published>2022-07-24T05:52:27.000Z</published>
    <updated>2022-07-24T08:04:29.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串解码">394.字符串解码</h1><h2 id="题目描述">题目描述</h2><p>给定一个经过编码的字符串，返回它解码后的字符串</p><p>编码规则为:k[encoded_string]，表示其中方括号内部的encoded_string正好重复k次。注意k保证为正整数</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的</p><p>此外，原始数据不包含数字，所有的数字只表示重复的次数k，例如不会出现像3a或2[4]的输入</p><h2 id="解题思路">解题思路</h2><p>遍历输入字符串</p><p>用一个栈来暂存字符串，规则如下</p><ol type="1"><li><p>如果是数字，那就向后继续找到这个整个数字，将其以字符串形式存入到栈中</p></li><li><p>如果是'['，就将'['单独放入到栈中</p></li><li><p>如果是字母，就将这个字符串存到栈中</p></li><li><p>如果是']'，就说明要执行这个解码规则，从栈中取出[]内的字符串str和'[',然后取出数字num，将这个str重复num次，再放到栈中</p></li></ol><p>为了让']'操作更简单，每次向栈中插入字符串时需要进行字符串的合并，str，str，str--&gt;str这样合并</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; !<span class="string">"["</span>.equals(stack.peek())) {</span><br><span class="line">    temp.append(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(stack.pop()).reverse());</span><br><span class="line">}</span><br><span class="line">stack.add(temp.reverse().append(merge).toString());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符串解码&quot;&gt;394.字符串解码&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个经过编码的字符串，返回它解码后的字符串&lt;/p&gt;
&lt;p&gt;编码规则为:
k[encoded_string]，表示其中方括号内部的encoded_strin</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>2343.裁剪数字后查询第K小的数字</title>
    <link href="http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/2343.%E8%A3%81%E5%89%AA%E6%95%B0%E5%AD%97%E5%90%8E%E6%9F%A5%E8%AF%A2%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/2343.%E8%A3%81%E5%89%AA%E6%95%B0%E5%AD%97%E5%90%8E%E6%9F%A5%E8%AF%A2%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-07-18T02:01:27.000Z</published>
    <updated>2022-07-18T02:11:21.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="section"></h1><h2 id="题目描述">题目描述</h2><p>一个下标从0开始的字符串数组nums，其中每个字符串长度相等且只包含数字</p><p>一个下标从0开始的二维整数数组queries，其中<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="21.887ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9674.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(460,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1032,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1498,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1949,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2294,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2760,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(3229,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3507,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3852,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4407.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5463.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(5741.6,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6589.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7034.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(7395.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7846.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(8191.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9396.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>。对于每个queries[i]，需要：</p><pre><code>将nums中每个数字裁剪到剩下最右边$trim_i$个数位在裁剪过后的数字中，找到nums中第$k_i$小数字对应的下标。如果两个裁剪后数字一样大，那么下标更小的数字视为更小的数字将nums中每个数字恢复到原本字符串</code></pre><p>返回一个长度与queries相等的数组answer，其中answer[i]是第i次查询的结果</p><p>提示：</p><pre><code>裁剪到剩下x个数位的意思是不断删除最左边的数位，直到剩下x个数位nums中的字符串可能会有前导0</code></pre><h2 id="解题思路">解题思路</h2><p>周赛题</p><p>看了别人的代码自己写的还是复杂了点，但也仅仅点点吧，感觉还好（时间差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String[]&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">    <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> nums[j];</span><br><span class="line">    num = num.substring(m - trim);</span><br><span class="line">    temp.add(<span class="keyword">new</span> <span class="title class_">String</span>[]{num, String.valueOf(j)});</span><br><span class="line">}</span><br><span class="line">temp.sort(((o1, o2) -&gt; {</span><br><span class="line">    <span class="keyword">if</span> (!Objects.equals(o1[<span class="number">0</span>], o2[<span class="number">0</span>])) {</span><br><span class="line">        <span class="keyword">return</span> o1[<span class="number">0</span>].compareTo(o2[<span class="number">0</span>]);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(o1[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> Integer.parseInt(o2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">    }</span><br><span class="line">}));</span><br><span class="line">ans[i] = Integer.parseInt(temp.get(query[<span class="number">0</span>] - <span class="number">1</span>)[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>将原先的每个数截取完trim后保存起来，同时保存他的索引</p><p>重写sort，按数的大小和索引的大小进行排序</p><p>最后保存所需要的索引</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;section&quot;&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个下标从0开始的字符串数组nums，其中每个字符串长度相等且只包含数字&lt;/p&gt;
&lt;p&gt;一个下标从0开始的二维整数数组queries，其中&lt;span class=&quot;math </summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>745.前缀和后缀搜索</title>
    <link href="http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/745.%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E6%90%9C%E7%B4%A2/"/>
    <id>http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/745.%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E6%90%9C%E7%B4%A2/</id>
    <published>2022-07-18T02:01:27.000Z</published>
    <updated>2022-07-18T02:03:50.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀和后缀搜索">745.前缀和后缀搜索</h1><h2 id="题目描述">题目描述</h2><p>设计一个包含一些单词的特殊词典，并能够通过前缀和后缀来检索单词</p><p>实现WordFilter类：</p><p>WordFilter(string[] words)使用词典中的单词words初始化对象</p><p>f(string pref, stringsuff)返回词典中具有前缀prefix和后缀suff的单词的下标。如果存在不止一个满足要求的下标，返回其中最大的下标。如果不存在这样的单词，返回-1</p><h2 id="解题思路">解题思路</h2><p>构建字典树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> {</span><br><span class="line">    Map&lt;Character, Trie&gt; children;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> {</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        index = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>字典树中每个节点保存index信息，表示第几个单词会走这条路径</p><p>构建顺序字典树和逆序字典树</p><p>查找单词时根据前缀树和后缀树找到两个list，表示都哪些单词会走这个路径</p><p>然后取两个list中都包含的最大值，如果不存在就返回-1</p><p>因为list的插入顺序是从小到大的，所以使用双指针直接O(n)就可以查找到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前缀和后缀搜索&quot;&gt;745.前缀和后缀搜索&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;设计一个包含一些单词的特殊词典，并能够通过前缀和后缀来检索单词&lt;/p&gt;
&lt;p&gt;实现WordFilter类：&lt;/p&gt;
&lt;p&gt;WordFilter(str</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>735.行星碰撞</title>
    <link href="http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/735.%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E/"/>
    <id>http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/735.%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E/</id>
    <published>2022-07-18T01:55:27.000Z</published>
    <updated>2022-07-18T01:58:56.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="行星碰撞">735.行星碰撞</h1><h2 id="题目描述">题目描述</h2><p>给定一个整数数组asteroids，表示在同一行的行星</p><p>对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动</p><p>找出碰撞后剩下的所有行星</p><p>碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞</p><h2 id="解题思路">解题思路</h2><p>循环直到某一轮没有行星发生碰撞</p><p>从左到右遍历，如果i向右，i+1向左则会发生碰撞</p><p>最后返回int[]</p><p><code>a.stream().mapToInt(Integer::intValue).toArray();</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;行星碰撞&quot;&gt;735.行星碰撞&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个整数数组asteroids，表示在同一行的行星&lt;/p&gt;
&lt;p&gt;对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>565.数组嵌套</title>
    <link href="http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/565.%E6%95%B0%E7%BB%84%E5%B5%8C%E5%A5%97/"/>
    <id>http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/565.%E6%95%B0%E7%BB%84%E5%B5%8C%E5%A5%97/</id>
    <published>2022-07-18T01:50:27.000Z</published>
    <updated>2022-07-18T01:54:44.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组嵌套">565.数组嵌套</h1><h2 id="题目描述">题目描述</h2><p>索引从0开始长度为N的数组A，包含0到N-1的所有整数。找到最大的集合S并返回其大小，其中S[i]={A[i],A[A[i]],A[A[A[i]]],...}且遵守以下的规则</p><p>假设选择索引为i的元素A[i]为S的第一个元素，S的下一个元素应该是A[A[i]]，之后是A[A[A[i]]]...以此类推，不断添加直到S出现重复的元素</p><h2 id="解题思路">解题思路</h2><p>数组A满足： A中不含有重复的元素</p><pre><code>A中的元素大小在[0, N-1]之间</code></pre><p>这个题相当于给A中的数分组，在离散数学里学过一个叫啥着（置换群）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">arrayNesting</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">boolean</span>[] visit = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (visit[i]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="keyword">while</span> (!set.contains(num)) {</span><br><span class="line">            set.add(num);</span><br><span class="line">            visit[num] = <span class="literal">true</span>;</span><br><span class="line">            num = nums[num];</span><br><span class="line">        }</span><br><span class="line">        ans = Math.max(ans, set.size());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组嵌套&quot;&gt;565.数组嵌套&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;索引从0开始长度为N的数组A，包含0到N-1的所有整数。找到最大的集合S并返回其大小，其中S[i]={A[i],A[A[i]],A[A[A[i]]],...
}且遵</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>558.四叉树交集</title>
    <link href="http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/558.%E5%9B%9B%E5%8F%89%E6%A0%91%E4%BA%A4%E9%9B%86/"/>
    <id>http://example.com/2022/07/18/LeetCode%E5%88%B7%E9%A2%98/558.%E5%9B%9B%E5%8F%89%E6%A0%91%E4%BA%A4%E9%9B%86/</id>
    <published>2022-07-18T01:44:27.000Z</published>
    <updated>2022-07-18T01:49:23.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四叉树交集">558.四叉树交集</h1><h2 id="题目描述">题目描述</h2><p>二进制矩阵中的所有元素不是0就是1</p><p>两个四叉树，quadTree1和quadTree2。其中quadTree1表示一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="5.481ex" height="1.136ex" role="img" focusable="false" viewBox="0 -491 2422.4 502"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>二进制矩阵，而quadTree2表示另一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="5.481ex" height="1.136ex" role="img" focusable="false" viewBox="0 -491 2422.4 502"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>二进制矩阵</p><p>返回一个表示<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="5.481ex" height="1.136ex" role="img" focusable="false" viewBox="0 -491 2422.4 502"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>二进制矩阵的四叉树，它是quadTree1和quadTree2所表示的两个二进制矩阵进行按位逻辑或运算的结果</p><p>当isLeaf为False时，你可以把True或者False赋值给节点，两种值都会被判题机制接受</p><p>四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：</p><pre><code>val：储存叶子结点所代表的区域的值。1对应True，0对应FalseisLeaf: 当这个节点是一个叶子结点时为True，如果它有4个子节点则为False</code></pre><h2 id="解题思路">解题思路</h2><p>题目描述的二进制矩阵与四叉树并不是一一对应的关系</p><p>四叉树交集——二进制做或操作</p><p>递归，解释见注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">intersect</span><span class="params">(Node quadTree1, Node quadTree2)</span> {</span><br><span class="line">    <span class="comment">//如果tree1是叶子结点，如果他的值是true就返回true（因为是做或操作）</span></span><br><span class="line">    <span class="keyword">if</span> (quadTree1.isLeaf) {</span><br><span class="line">        <span class="keyword">if</span> (quadTree1.val) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//因为tree1是fasle所以返回tree2</span></span><br><span class="line">        <span class="keyword">return</span> quadTree2;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//互换位置</span></span><br><span class="line">    <span class="keyword">if</span> (quadTree2.isLeaf) {</span><br><span class="line">        <span class="keyword">return</span> intersect(quadTree2, quadTree1);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">Node</span> <span class="variable">o1</span> <span class="operator">=</span> intersect(quadTree1.topLeft, quadTree2.topLeft);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">o2</span> <span class="operator">=</span> intersect(quadTree1.topRight, quadTree2.topRight);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">o3</span> <span class="operator">=</span> intersect(quadTree1.bottomLeft, quadTree2.bottomLeft);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">o4</span> <span class="operator">=</span> intersect(quadTree1.bottomRight, quadTree2.bottomRight);</span><br><span class="line">    <span class="comment">//都是叶子结点并且val相同需要合并</span></span><br><span class="line">    <span class="keyword">if</span> (o1.isLeaf &amp;&amp; o2.isLeaf &amp;&amp; o3.isLeaf &amp;&amp; o4.isLeaf &amp;&amp; o1.val == o2.val &amp;&amp; o1.val == o3.val &amp;&amp; o1.val == o4.val) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(o1.val, <span class="literal">true</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//不是叶子结点，给四个区域赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">false</span>, <span class="literal">false</span>, o1, o2, o3, o4);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四叉树交集&quot;&gt;558.四叉树交集&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;二进制矩阵中的所有元素不是0就是1&lt;/p&gt;
&lt;p&gt;两个四叉树，quadTree1和quadTree2。其中quadTree1表示一个&lt;span class=&quot;m</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2337.移动片段得到字符串</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2337.%E7%A7%BB%E5%8A%A8%E7%89%87%E6%AE%B5%E5%BE%97%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2337.%E7%A7%BB%E5%8A%A8%E7%89%87%E6%AE%B5%E5%BE%97%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-07-11T05:15:27.000Z</published>
    <updated>2022-07-12T05:21:33.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动片段得到字符串">2337.移动片段得到字符串</h1><h2 id="题目描述">题目描述</h2><p>两个字符串start和target，长度均为n。每个字符串仅由字符'L'、'R'和'_'组成，其中：</p><pre><code>字符'L'和'R'表示片段，其中片段'L'只有在其左侧直接存在一个空位时才能向左 移动，而片段'R'只有在其右侧直接存在一个空位时才能向右移动字符'_'表示可以被任意'L'或'R'片段占据的空位如果在移动字符串start中的片段任意次之后可以得到字符串target，返回true；否则，返回false</code></pre><h2 id="解题思路">解题思路</h2><p>周赛题，最开始思路太乱了</p><p>对i从0~length做循环，i表示前i个字符已经一样了</p><p>如果start[i]和target[i]一样就看下一个字符</p><p>不一样的话根据target的字符情况，L、R、_进行讨论</p><p>如果是L，start只能从i的右侧来移动L过来</p><p>如果是R，因为左侧字符已经都一样了，直接返回false</p><p>如果是_，就只能将start的R右移才能出现_</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canChange</span><span class="params">(String start, String target)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> start.length();</span><br><span class="line">    start1 = start.toCharArray();</span><br><span class="line">    target1 = target.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (start1[i] == target1[i]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> target1[i];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'L'</span>) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; n &amp;&amp; start1[index] == <span class="string">'_'</span>) {</span><br><span class="line">                index++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (index == n) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (start1[index] == <span class="string">'R'</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                swap(index, i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'R'</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'_'</span>) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; n &amp;&amp; start1[index] == <span class="string">'R'</span>) {</span><br><span class="line">                index++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (index == n) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (start1[index] == <span class="string">'_'</span>) {</span><br><span class="line">                swap(i, index);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动片段得到字符串&quot;&gt;2337.移动片段得到字符串&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;两个字符串start和target，长度均为n。每个字符串仅由字符&#39;L&#39;、&#39;R&#39;和&#39;_&#39;组成，其中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字符&#39;L&#39;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2336.无限集中的最小数字</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2336.%E6%97%A0%E9%99%90%E9%9B%86%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2336.%E6%97%A0%E9%99%90%E9%9B%86%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2022-07-11T05:08:27.000Z</published>
    <updated>2022-07-12T05:13:41.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无限集中的最小数字">2336.无限集中的最小数字</h1><h2 id="题目描述">题目描述</h2><p>现有一个包含所有正整数的集合[1, 2, 3, 4, 5, ...]</p><p>实现SmallestInfiniteSet类：</p><pre><code>SmallestInfiniteSet()初始化SmallestInfiniteSet对象以包含所有正整数int popSmallest()移除并返回该无限集中的最小整数void addBack(int num)如果正整数num不存在于无限集中，则将一个num添加 到该无限集中</code></pre><h2 id="解题思路">解题思路</h2><p>用一个minExits表示原本集合中最小的数，初始化为1</p><p>用一个treemap保存后插入的数</p><p>根据情况分类</p><p>如删除最小整数，找到集合中小于minExits的最大整数，如果存在就删除set中的数，如果不存在就说明set中的数都大于minExits，就删除minExits</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">popSmallest</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (set.isEmpty()) {</span><br><span class="line">        ret = minExits++;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">temp</span> <span class="operator">=</span> set.floor(minExits);</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">null</span>) {</span><br><span class="line">            ret = set.pollFirst();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            ret = minExits++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>如果插入的数大于minExits就已经存在不用管</p><p>如果小于minExits，就放到set中（set会自动去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBack</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="keyword">if</span> (num &lt; minExits) {</span><br><span class="line">        set.add(num);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;无限集中的最小数字&quot;&gt;2336.无限集中的最小数字&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;现有一个包含所有正整数的集合[1, 2, 3, 4, 5, ...]&lt;/p&gt;
&lt;p&gt;实现SmallestInfiniteSet类：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2335.装满杯子需要的最短总时长</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2335.%E8%A3%85%E6%BB%A1%E6%9D%AF%E5%AD%90%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E7%9F%AD%E6%80%BB%E6%97%B6%E9%95%BF/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/2335.%E8%A3%85%E6%BB%A1%E6%9D%AF%E5%AD%90%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E7%9F%AD%E6%80%BB%E6%97%B6%E9%95%BF/</id>
    <published>2022-07-11T05:04:27.000Z</published>
    <updated>2022-07-12T05:07:30.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装满杯子需要的最短总时长">2335.装满杯子需要的最短总时长</h1><h2 id="题目描述">题目描述</h2><p>现有一台饮水机，可以制备冷水、温水和热水。每秒钟，可以装满2杯不同类型的水或者1杯任意类型的水</p><p>一个整数数组amount，其中amount[0]、amount[1]和amount[2]分别表示需要装满冷水、温水和热水的杯子数量。返回装满所有杯子所需的最少秒数</p><h2 id="解题思路">解题思路</h2><p>简单题，但是感觉挺有意思</p><p>先排序，不能直接一步做完,因为哪个水需要的多或少是动态变化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fillCups</span><span class="params">(<span class="type">int</span>[] amount)</span> {</span><br><span class="line">    Arrays.sort(amount);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> amount[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> amount[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> amount[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) {</span><br><span class="line">        a--;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span> (c &gt; b) {</span><br><span class="line">            c--;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            b--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (c &gt; b) {</span><br><span class="line">        ans += c;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        ans += b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装满杯子需要的最短总时长&quot;&gt;2335.装满杯子需要的最短总时长&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;现有一台饮水机，可以制备冷水、温水和热水。每秒钟，可以装满2杯不同类型的水或者1杯任意类型的水&lt;/p&gt;
&lt;p&gt;一个整数数组amou</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>676.实现一个魔法字典</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/676.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AD%94%E6%B3%95%E5%AD%97%E5%85%B8/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/676.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AD%94%E6%B3%95%E5%AD%97%E5%85%B8/</id>
    <published>2022-07-11T04:59:27.000Z</published>
    <updated>2022-07-12T05:03:04.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现一个魔法字典">676.实现一个魔法字典</h1><h2 id="题目描述">题目描述</h2><p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词互不相同。如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p><p>实现 MagicDictionary 类：</p><pre><code>MagicDictionary()初始化对象void buildDict(String[] dictionary) 使用字符串数组dictionary设定该数据结构，dictionary中的字符串互不相同bool search(String searchWord)给定一个字符串searchWord，判定能否只将字符串中 一个字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回true；否则，返回false</code></pre><h2 id="解题思路">解题思路</h2><p>用一个map&lt;int,set&lt;string&gt;&gt;来保存这个长度的字符串</p><p>然后search时遍历该长度的set中的所有单词，如果只有一个字母不同则返回true，如果有两个不同了就继续找下一个单词，如果遍历完了set还没找到单词就返回false</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现一个魔法字典&quot;&gt;676.实现一个魔法字典&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;设计一个使用单词列表进行初始化的数据结构，单词列表中的单词互不相同。
如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>741.摘樱桃</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/741.%E6%91%98%E6%A8%B1%E6%A1%83/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/741.%E6%91%98%E6%A8%B1%E6%A1%83/</id>
    <published>2022-07-11T04:49:27.000Z</published>
    <updated>2022-07-12T04:57:45.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘樱桃">741.摘樱桃</h1><h2 id="题目描述">题目描述</h2><p>一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="6.784ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 2998.4 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1110.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(2110.4,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>的网格(grid) 代表了一块樱桃地，每个格子由以下三种数字的一种来表示：</p><pre><code>0表示这个格子是空的，所以你可以穿过它1表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它-1表示这个格子里有荆棘，挡着你的路</code></pre><p>你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：</p><p>从位置(0,0)出发，最后到达(N-1,N-1)，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）</p><p>当到达(N-1,N-1)后，你要继续走，直到返回到(0,0)，只能向上或向左走，并且只能穿越有效的格子</p><p>当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）</p><p>如果在(0,0)和(N-1,N-1)之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到</p><h2 id="解题思路">解题思路</h2><p>一个人从(0,0)走到(n-1,n-1),再从(n-1,n-1)走到(0,0)，相当于两个人同时从(0,0)走到(n-1,n-1)，每个人都可以向右或者向下</p><p>设两个人的坐标为A(x1,y1),B(x2,y2),则状态可表示为dp[x1][x2][y1][y2]，表示当前状态下的最大樱桃数量</p><p>若当前走了k次（k的取值范围是[0,2n-1),即从(0,0)走到(n-1,n-1)需要走2n-1步），则有x1+y1= x2+y2 = k，所以y1、y2都和k有关系，则上述状态可简化为dp[x1][x2][k]</p><p>为了方便，让A永远在B上方走，即x1&lt;=x2</p><p>分四种情况，A向下向右*B向下向右</p><p>同时应该判断下如果AB在同一个位置则只算他们摘到了一个樱桃</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摘樱桃&quot;&gt;741.摘樱桃&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个&lt;span class=&quot;math inline&quot;&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vert</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>648.单词替换</title>
    <link href="http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/648.%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/"/>
    <id>http://example.com/2022/07/11/LeetCode%E5%88%B7%E9%A2%98/648.%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/</id>
    <published>2022-07-11T04:42:27.000Z</published>
    <updated>2022-07-12T04:47:26.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单词替换">648.单词替换</h1><h2 id="题目描述">题目描述</h2><p>在英语中可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为继承词</p><p>例如，词根an，跟随着单词other(其他)，可以形成新的单词another(另一个)</p><p>给定一个由许多词根组成的词典dictionary和一个用空格分隔单词形成的句子sentence。将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它</p><p>输出替换之后的句子</p><h2 id="解题思路">解题思路</h2><p>用一个set先将所有的词根保存起来</p><p>将sentcen拆分成单词</p><p>取单词的所有词根，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="20.669ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9135.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2067.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2456.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3234.2,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4290,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4912.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(5968.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6266.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(6732.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7332.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(7809.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(8170.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(8746.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>将每一个词根和set判断词根是否在set中，如果是就替换然后进行下一个单词</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单词替换&quot;&gt;648.单词替换&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;在英语中可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为继承词&lt;/p&gt;
&lt;p&gt;例如，词根an，跟随着单词other(其他)，可以形成新的单词anot</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2327.知道秘密的人数</title>
    <link href="http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2327.%E7%9F%A5%E9%81%93%E7%A7%98%E5%AF%86%E7%9A%84%E4%BA%BA%E6%95%B0/"/>
    <id>http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2327.%E7%9F%A5%E9%81%93%E7%A7%98%E5%AF%86%E7%9A%84%E4%BA%BA%E6%95%B0/</id>
    <published>2022-07-05T03:32:27.000Z</published>
    <updated>2022-07-05T03:37:27.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知道秘密的人数">2327.知道秘密的人数</h1><h2 id="题目描述">题目描述</h2><p>在第1天，有一个人发现了一个秘密</p><p>一个整数delay，表示每个人会在发现秘密后的delay天之后，每天给一个新的人分享秘密</p><p>一个整数forget，表示每个人在发现秘密forget天之后会忘记这个秘密。一个人不能 在忘记秘密那一天及之后的日子里分享秘密</p><p>一个整数n，返回在第n天结束时，知道秘密的人数</p><p>由于答案可能会很大，将结果对<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="7.147ex" height="2.14ex" role="img" focusable="false" viewBox="0 -864 3159 946"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g><g data-mml-node="mo" transform="translate(1658.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2659,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></svg></mjx-container></span>取余后返回</p><h2 id="解题思路">解题思路</h2><p>统计第i天新增的人数，然后知道秘密的总人数其实就等于从最后一天往前推forget天的人数和</p><p>每一个第i天知道秘密的人，都对[i+delay,i+forget)这个区间有贡献，从前往后推即可,时间复杂度O(n^2)</p><p>（不知道我为啥陷入类似于斐波那契数列那种题的思路上去了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;知道秘密的人数&quot;&gt;2327.知道秘密的人数&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;在第1天，有一个人发现了一个秘密&lt;/p&gt;
&lt;p&gt;一个整数delay，表示每个人会在发现秘密后的delay天之后，每天给一个新的人分享秘密&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>2326.螺旋矩阵IV</title>
    <link href="http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2326.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5IV/"/>
    <id>http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/2326.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5IV/</id>
    <published>2022-07-05T03:25:27.000Z</published>
    <updated>2022-07-05T03:31:14.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="螺旋矩阵iv">2326.螺旋矩阵IV</h1><h2 id="题目描述">题目描述</h2><p>两个整数：m和n，表示矩阵的维数</p><p>一个整数链表的头节点head</p><p>生成一个大小为mxn的螺旋矩阵，矩阵包含链表中的所有整数。链表中的整数从矩阵左上角开始、顺时针按螺旋顺序填充</p><p>如果还存在剩余的空格，则用-1填充</p><p>返回生成的矩阵</p><h2 id="解题思路">解题思路</h2><p>模拟</p><p>行进方向有四种，向右-&gt;向下-&gt;向左-&gt;向上</p><p>每次到达边界时边界都会产生相应的变化，如向右到达边界时上边界会发生变化</p><p>每走一格让head=head-&gt;next直到head为null，填充的值由val变成-1</p><p>(看别人代码怎么这么简洁,捂脸.jpg</p><p>将四个方向坐标的变化保存起来，然后四个方向不断循环</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;螺旋矩阵iv&quot;&gt;2326.螺旋矩阵IV&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;两个整数：m和n，表示矩阵的维数&lt;/p&gt;
&lt;p&gt;一个整数链表的头节点head&lt;/p&gt;
&lt;p&gt;生成一个大小为mxn的螺旋矩阵，矩阵包含链表中的所有整数。链</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="模拟" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>871.最低加油次数</title>
    <link href="http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/871.%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/"/>
    <id>http://example.com/2022/07/05/LeetCode%E5%88%B7%E9%A2%98/871.%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/</id>
    <published>2022-07-05T03:02:27.000Z</published>
    <updated>2022-07-05T03:22:11.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最低加油次数">871.最低加油次数</h1><h2 id="题目描述">题目描述</h2><p>汽车从起点出发驶向目的地，该目的地位于出发位置东面target英里处</p><p>沿途有加油站，每个station[i]代表一个加油站，它位于出发位置东面station[i][0]英里处，并且有station[i][1]升汽油</p><p>假设汽车油箱的容量是无限的，其中最初有startFuel升燃料。它每行驶1英里就会用掉1升汽油</p><p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中</p><p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回-1</p><p>如果汽车到达加油站时剩余燃料为0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为0，仍然认为它已经到达目的地</p><h2 id="解题思路">解题思路</h2><p>dp[i]表示加油i次的最大行驶英里数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> stations.length;</span><br><span class="line"><span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = startFuel;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; j--) {</span><br><span class="line">        <span class="keyword">if</span> (dp[j] &gt;= stations[i][<span class="number">0</span>]) {</span><br><span class="line">            dp[j + <span class="number">1</span>] = Math.max(dp[j + <span class="number">1</span>], dp[j] + stations[i][<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt;= target) {</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>加油站的位置已经是排好序的了，对每个加油站进行遍历</p><p>当走到加油站i时，他已经加了最多i次油，对加油的次数进行遍历i~0</p><p>如果加了j次油可以到达加油站i，那么就可以在这个加油站加油</p><p>遍历完成后，遍历dp找到第一个能够达到目的地的次数，就是最小加油次数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最低加油次数&quot;&gt;871.最低加油次数&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;汽车从起点出发驶向目的地，该目的地位于出发位置东面target英里处&lt;/p&gt;
&lt;p&gt;沿途有加油站，每个station[i]代表一个加油站，它位于出发位置东面</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
</feed>
