<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>樊tastic~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-20T13:01:34.220Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>樊tastic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/02/20/LeetCode%E5%BC%BA%E5%8C%96/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://example.com/2023/02/20/LeetCode%E5%BC%BA%E5%8C%96/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2023-02-20T13:00:37.513Z</published>
    <updated>2023-02-20T13:01:34.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑动窗口">滑动窗口</h1><h2 id="最小覆盖子串"><ahref="https://leetcode.cn/problems/minimum-window-substring/">76.最小覆盖子串</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;滑动窗口&quot;&gt;滑动窗口&lt;/h1&gt;
&lt;h2 id=&quot;最小覆盖子串&quot;&gt;&lt;a
href=&quot;https://leetcode.cn/problems/minimum-window-substring/&quot;&gt;76.
最小覆盖子串&lt;/a&gt;&lt;/h2&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/02/15/post.typora/"/>
    <id>http://example.com/2023/02/15/post.typora/</id>
    <published>2023-02-15T15:30:03.463Z</published>
    <updated>2023-02-15T15:30:03.463Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://example.com/2023/02/15/LeetCode%E5%BC%BA%E5%8C%96/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://example.com/2023/02/15/LeetCode%E5%BC%BA%E5%8C%96/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2023-02-15T15:17:27.000Z</published>
    <updated>2023-02-21T12:47:19.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集union-find">并查集（Union-Find）</h1><p>2023年2月21日</p><p>一个博客https://leetcode.cn/circle/discuss/qmjuMW/</p><p>并查集是来解决<strong>图的连通性</strong>问题</p><p><code>判断图的连通性的方法，找到两个点的根节点，然后判断这两个点的根节点是否相同，然后就可以判断这两个点是否连通了。</code></p><p>Union——连接两个节点</p><p>Find——查找所属的连通分量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> {</span><br><span class="line">    <span class="comment">/* 将 p 和 q 连接 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 判断 p 和 q 是否连通 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 返回图中有多少个连通分量 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 返回当前节点的根节点 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="数据结构">数据结构</h2><p><strong>连通性</strong>:如果p和q连通，则它们有相同的根节点</p><p>用数组<code>parent[]</code>来表示这种关系</p><p>如果自己就是根节点，那么<code>parent[i]=i</code>，即自己指向自己</p><p>如果自己不是根节点，则<code>parent[i]=root id</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="built_in">this</span>.count = n;</span><br><span class="line">    parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="comment">// 最初，每个节点均是独立的</span></span><br><span class="line">        parent[i] = i;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="union方法将两个节点连接起来">Union方法——将两个节点连接起来</h2><p>只需将其中任一一个节点的根节点指向另一个节点的根节点即可</p><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202302162249746.png" alt="image-20230216224940674"><figcaption aria-hidden="true">image-20230216224940674</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">    <span class="comment">// 找到 p 的根节点 rootP</span></span><br><span class="line">    <span class="comment">// 找到 q 的根节点 rootQ</span></span><br><span class="line">    <span class="comment">// 如果已经在同一个连通分支中，跳过</span></span><br><span class="line">    <span class="comment">// parent[rootP] = rootQ</span></span><br><span class="line">    <span class="comment">// 或 parent[rootQ] = rootP</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>如何快速的找到根节点呢？根据根节点自己指向自己的特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">    <span class="keyword">while</span> (x != parent[x]) {</span><br><span class="line">        x = parent[x];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="connected">Connected</h2><p>判断两个点是否连通</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line"><span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line"><span class="type">return</span> <span class="variable">rootP</span> <span class="operator">=</span>= rootQ;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="count">Count</h2><p>返回连通分支的数目,count()需要维护一个全局变量，来记录图的连通分量的数量</p><p>只有在调用 union() 方法时，才可能改变连通分量的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">    <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">    parent[rootP] = rootQ;</span><br><span class="line">    <span class="comment">// 连通分量 -1</span></span><br><span class="line">    count--;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="瓶颈分析">瓶颈分析</h2><h3 id="平衡优化">平衡优化</h3><p>就像二叉树一样，并查集也会出现倾斜</p><p>使用额外的一个数组 <code>size[]</code>记录每个连通分量中的节点数，每次均把节点数少的分量接到节点数多的分量上</p><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202302162258221.png" alt="image-20230216225850190"><figcaption aria-hidden="true">image-20230216225850190</figcaption></figure><p>只有每个连通分量的根节点的 size[] 才可以代表该连通分量中的节点数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UF</span> <span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="built_in">this</span>.count = n;</span><br><span class="line">    parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        parent[i] = i;</span><br><span class="line">        <span class="comment">// 最初，每个连通分量均为 1</span></span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">    <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/******** 修改部分 ********/</span></span><br><span class="line">    <span class="keyword">if</span> (size[rootP] &lt; size[rootQ]) {</span><br><span class="line">        parent[rootP] = rootQ;</span><br><span class="line">        size[rootQ] += size[rootP]</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        parent[rootQ] = rootP;</span><br><span class="line">        size[rootP] += size[rootQ]</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/********** end **********/</span></span><br><span class="line">    count--;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="路径压缩">路径压缩</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">    <span class="keyword">if</span> (parent[x] != x) {</span><br><span class="line">        parent[x] = find(parent[x]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> parent[x];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="完整模板">完整模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] size;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">// 平衡性优化</span></span><br><span class="line">        <span class="keyword">if</span> (size[rootP] &lt; size[rootQ]) {</span><br><span class="line">            parent[rootP] = rootQ;</span><br><span class="line">            size[rootQ] += size[rootP];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            size[rootP] += size[rootQ];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">conneted</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="type">return</span> <span class="variable">rootP</span> <span class="operator">=</span>= rootQ;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="comment">// 路径压缩</span></span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) {</span><br><span class="line">            parent[x] = find(parent[x]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="应用">应用</h2><p>求最近公共祖先（LCA）</p><p>不想交集的合并问题</p><h2 id="力扣例题">力扣例题</h2><h3 id="最长连续序列"><a href="https://leetcode.cn/problems/longest-consecutive-sequence/">128.最长连续序列</a></h3><p>给定一个未排序的整数数组<code>nums</code>，找出数字连续的最长序列的长度。整个数组里的数字的最长连续序列，不需要管顺序也不需要管连续</p><p>用map做并查集</p><p>遍历nums，对于num如果num+1在并查集中，就将num和num+1连起来</p><p>再遍历一次nums，找到num的根节点right，right-num+1就是连续的序列，遍历过程中求最大值</p><h3 id="被围绕的区域"><a href="https://leetcode.cn/problems/surrounded-regions/">130.被围绕的区域</a></h3><p>题目描述不清晰，但是示例中告诉了求法，不在边界上，并且不与边界上的O上下相连的O最终可以变成X，最后在输入数组中修改</p><p>一个<code>m*n</code>的矩阵，那就是<code>m*n</code>个元素，再加一个虚拟节点。标号为<code>0~m*n</code>,做一个映射坐标为<code>(i,j)</code>的值是<code>i*col+j</code>，所有边界上的O的根节点设置为这个虚拟节点</p><p>遍历一遍，判断不是边界的O的上下左右节点是否为O，是O就是为他的根节点为这个O（会自动路径压缩）</p><p>这样就已经构造好了并查集，再遍历一次判断每个节点的根节点是否为虚拟节点，如果不是的话就将O改为X</p><p>最后可以print这个数组来观察一下结果</p><h3 id="岛屿数量"><a href="https://leetcode.cn/problems/number-of-islands/">200.岛屿数量</a></h3><p>已经写出板子题的感觉了，同样判断上下左右，向并查集中加结点</p><h3 id="除法求值"><a href="https://leetcode.cn/problems/evaluate-division/">399.除法求值</a></h3><p>并查集变种，很有意思的一个题</p><p>我最开始想拿图（单向边）套一个并查集，但是无法解决反向查询的问题，后来想改双向，然后偷懒看了一下题解</p><p>看了题解后发现思路有问题</p><p>如果说两个点连通，那么两个点就有相同的根节点，然后每个点相对于它的根节点有一个权重，根据这两个权重就可以计算这两个点之间的除法关系</p><p>需要额外做的就是维护点到与其根节点的权重</p><p>主要是在路径压缩和union操作时维护</p><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202302202229160.png" alt="image-20230220222859035"><figcaption aria-hidden="true">image-20230220222859035</figcaption></figure><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202302202230093.png" alt="image-20230220223022052"><figcaption aria-hidden="true">image-20230220223022052</figcaption></figure><p>weight[x]是x到rootX的倍数关系，比如x/y=3，那么<code>parent[x] = y</code>，并且<code>weight[x]=2</code></p><h3 id="省份数量"><a href="https://leetcode.cn/problems/number-of-provinces/">547.省份数量</a></h3><p>感觉板子题，返回连通分支数目就行了</p><h3 id="冗余连接"><a href="https://leetcode.cn/problems/redundant-connection/">684.冗余连接</a></h3><p>一个树中加了一条边，求可以删除的边</p><p>这个要求返回的是edges中最后一个可以删去的边</p><p>用并查集的思想，就死每一个点都是独立的，然后按照edges的顺序加边，对于u，v就是将这两个点连通。如果说这两个点已经连通了就说明这是应删去的边</p><h3 id="冗余连接-ii"><a href="https://leetcode.cn/problems/redundant-connection-ii/">685.冗余连接 II</a></h3><p>根据题意肯定会出现异常的情况</p><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202302211533150.png" alt="image-20230221153348120"><figcaption aria-hidden="true">image-20230221153348120</figcaption></figure><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202302211534220.png" alt="image-20230221153427172"><figcaption aria-hidden="true">image-20230221153427172</figcaption></figure><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202302211534887.png" alt="image-20230221153437856"><figcaption aria-hidden="true">image-20230221153437856</figcaption></figure><p>有三种情况，一个是存在环，一个是存在入度为2的点，一个是既存在环又存在入度为2的点</p><p>如果是出现了环，就删掉导致出现环的最后一个边</p><p>如果是出现了存在入度为2的点，那么就删掉该点的任意一条边均可（记录了最后出现的）</p><p>如果是既存在环又存在入度为2的点，就返回导致冲突的边和它的parent，注意这个parent不是并查集中的root，而就是真实的父节点</p><p>需要做的是遍历给的所有边</p><p>如果此时已经有parent[v]!=v，说明v有两个父节点，将当前的边[u,v]记为导致冲突的边；</p><p>否则，令parent[v]=u，然后在并查集中分别找到u和v的祖先（即各自的连通分支中的根节点）</p><p>如果祖先相同，说明这条边导致环路出现，将当前的边[u,v]记为导致环路出现的边</p><p>如果祖先不同，则在并查集中将u和v进行合并。</p><h3 id="岛屿的最大面积"><a href="https://leetcode.cn/problems/max-area-of-island/">695.岛屿的最大面积</a></h3><p>并查集数据结构中添加一个size，size[x]表示以x为根节点的面积</p><p>在union操作时更新size</p><p>最后遍历一遍返回最大的size即可</p><h3 id="账户合并"><a href="https://leetcode.cn/problems/accounts-merge/">721.账户合并</a></h3><p>email是无重复的，将email作为并查集的元素</p><p>做一个email到name的映射</p><p>最后根据并查集来构造ans即可</p><h3 id="判断二分图"><a href="https://leetcode.cn/problems/is-graph-bipartite/">785.判断二分图</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBipartite</span><span class="params">(<span class="type">int</span>[][] graph)</span> {</span><br><span class="line">    <span class="type">UnionFind8</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind8</span>(graph.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++) {</span><br><span class="line">        <span class="type">int</span>[] edges = graph[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u : edges) {</span><br><span class="line">            <span class="comment">//当前点i和它的边的另一个点u不能在同一个连通分支内</span></span><br><span class="line">            <span class="keyword">if</span> (uf.isConnected(i, u)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//假设对于点0，edges表示该点相对于其他点的关系，这些点应该位于同一个连通分支内</span></span><br><span class="line">            uf.union(edges[<span class="number">0</span>], u);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="可能的二分法"><a href="https://leetcode.cn/problems/possible-bipartition/">886.可能的二分法</a></h3><p>一共有n个点，如果(a,b),(b,c)那么a和c一定在同一侧</p><p>可以令x+n表示一个点，x在A侧，x+n在B侧，这样就自动分为两侧了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并查集union-find&quot;&gt;并查集（Union-Find）&lt;/h1&gt;
&lt;p&gt;2023年2月21日&lt;/p&gt;
&lt;p&gt;一个博客https://leetcode.cn/circle/discuss/qmjuMW/&lt;/p&gt;
&lt;p&gt;并查集是来解决&lt;strong&gt;图的连</summary>
      
    
    
    
    <category term="LeetCode强化" scheme="http://example.com/categories/LeetCode%E5%BC%BA%E5%8C%96/"/>
    
    
    <category term="并查集" scheme="http://example.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>滴滴实习总结</title>
    <link href="http://example.com/2023/02/15/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/%E6%BB%B4%E6%BB%B4/"/>
    <id>http://example.com/2023/02/15/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/%E6%BB%B4%E6%BB%B4/</id>
    <published>2023-02-15T14:23:27.000Z</published>
    <updated>2023-02-15T15:03:50.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滴滴实习总结">滴滴实习总结</h1><p>部门：网约车-增长技术-运营中台</p><p>系统简介：</p><p>运营中台的核心是策略模板与画布，包含了人群分流信息及策略活动信息。并在模板和画布的基础上实现预算分配与实验计划等功能</p><p>活动杂、上下游对接系统过多（人群，券，apollo，任务，pope，bpm）</p><p>技术积淀一般，技术栈为spring+mysql，和数据同学交互的涉及到flink（之前就写好的数据导出脚本，也不归中台负责，归下游的任务，pope系统负责）</p><p>氛围融洽，不卷，工作时间为早十点到晚八点，偶尔需要到晚九点</p><p>运营和算法同学使用，算法同学主要是做一些ab实验</p><p>工作量不大但是心累，不知道是第一次实习还是真的是因为这个系统的问题，感觉历史包裹很重沟通成本也比较大，经常出现算法来问你这个画布，这个计划为上上不了线了就得去排查。与下游系统缺少很好的同步机制，往往是参数上对不上了创建活动失败了才来对，并且测试环境和线上环境分的不是很开，请求都是通过配置文件来写ip+url来走http，甚至有时测试环境改了我得等程序跑起来才知道，为什么没有这种统一api呢</p><p>主要工作：</p><ol type="1"><li><p>crm接入用户养成任务</p><p>刚入职，各种活动参数很多，代码也还不熟悉</p></li><li><p>接入望岳风险信息</p><p>相对于第一个需求写起来得心应手，只是crud，在发送请求时添加几个参数</p></li><li><p>抓手重构</p><p>从刚入职mentor就想着手做的事情（之前的vo和biz杂糅在一起</p><p>多次讨论了重构后的结构，最后为了系统的稳定性和可追溯性增加了一层，创建活动时将参数保留在自己的数据库中，并且也将多个抓手的相同参数提取了出来进行了抽象，也方便后续再有活动的接入（乘客任务多种，离线绑券，全感知，后续要接入的还有套餐，但这个已经离职了</p></li><li><p>apollo实验管理</p><p>赶上新冠的一周，只是写了几个查询接口，同样是将apollo信息留底存在自己的库中，同时方便运营，算法等同学查看</p></li><li><p>收敛审批流程（分布式事务实现回滚）</p><p>以前的画布是生成过程中将活动一个一个的创建，当某个活动创建失败时，整张画布就生成失败了，但是有的活动已经创建了出来甚至提交审核了，需要再手动的撤回审核，不然审核通过有较大的的资损风险，但是按照以前的逻辑画布生成失败后运营、算法同学需要联系我们来在数据库中查找这个活动id再去撤回，因为生成失败画布信息是不完整的，没有办法再显示，也有着较大的沟通成本。并且一个画布中有多种活动，需要联系T2去不同的下游系统中一个一个地去审核通过，人力成本较大</p><p>接着画布收敛审批流程这一需求，实现了失败自动回滚和画布一键审核，将画布草稿化了，更方便编辑，在实例化画布时才生成画布，如果某一活动生成失败，就会自动将已经创建提审的活动给撤回，并且提交审核时根据风险等级由T2或T1在bpm中完成审核，然后bpm回调，将这个画布上线。</p></li></ol><p>主要收获：</p><p>公司中开发流程，编码规范，code review，上线流程和线上问题排查方法</p><p>真正的前后端不同人相互协作完成功能的开发，主要是沟通问题</p><p>一些实用小工具和快捷键</p><p>mysql，之前全部用mybatsiplus写，很少会自己去写mysql语句，发现十分的生疏</p><p>系统功能设计，技术方案产出能力</p><p>java的consumer、supplier和stream更熟练的使用</p><p>两阶段提交的分布式事务解决方案</p><p>mysql数据库的锁机制</p><p>离职原因：</p><p>线上办公习惯了对线下的排斥也是原因之一吧</p><p>杞人忧天，怕学校这学期有什么事，做到3月末再离职就好了</p><p>但这学期也确实需要看看毕业相关的东西，和再学学其他的来准备暑期实习</p><p>今天晚上算进入学习状态了，希望下面几个月能少玩dnf，找到毕业论文的方向</p><p>还有一些“冷知识”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;滴滴实习总结&quot;&gt;滴滴实习总结&lt;/h1&gt;
&lt;p&gt;部门：网约车-增长技术-运营中台&lt;/p&gt;
&lt;p&gt;系统简介：&lt;/p&gt;
&lt;p&gt;运营中台的核心是策略模板与画布，包含了人群分流信息及策略活动信息。并在模
板和画布的基础上实现预算分配与实验计划等功能&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="实习总结" scheme="http://example.com/categories/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>754.到达终点数字</title>
    <link href="http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/754.%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9%E6%95%B0%E5%AD%97/"/>
    <id>http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/754.%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9%E6%95%B0%E5%AD%97/</id>
    <published>2022-11-07T12:19:27.000Z</published>
    <updated>2022-11-07T12:22:48.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="754-到达终点数字"><a href="#754-到达终点数字" class="headerlink" title="754.到达终点数字"></a><a href="https://leetcode.cn/problems/reach-a-number/">754.到达终点数字</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> {</span><br><span class="line">    target = Math.abs(target);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((sum - target) % <span class="number">2</span> == <span class="number">1</span> || sum &lt; target) {</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>代码很简短啊，从最开始比这长优化下来的</p><p>假设一直向右移，如果其中一步改成向左了，那原本向右的就少i，而又向左了i，所以就是个2i</p><p>（sum-target）必须是偶数才可以<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.846ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6562 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1333.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1833.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2278.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(2778.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mo" transform="translate(3945,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5283.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5728.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6173,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>就一直让i++直到满足条件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;754-到达终点数字&quot;&gt;&lt;a href=&quot;#754-到达终点数字&quot; class=&quot;headerlink&quot; title=&quot;754.到达终点数字&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/reach-a-number/&quot;&gt;7</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>816.模糊坐标</title>
    <link href="http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/816.%E6%A8%A1%E7%B3%8A%E5%9D%90%E6%A0%87/"/>
    <id>http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/816.%E6%A8%A1%E7%B3%8A%E5%9D%90%E6%A0%87/</id>
    <published>2022-11-07T12:12:27.000Z</published>
    <updated>2022-11-07T12:18:25.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="816-模糊坐标"><a href="#816-模糊坐标" class="headerlink" title="816.模糊坐标"></a><a href="https://leetcode.cn/problems/ambiguous-coordinates/">816.模糊坐标</a></h1><p>贴下代码，首先要把左括号和右括号去了</p><p>然后分割成两部分每一部分最少有一个字符</p><p>然后将这连个子字符串进行计算</p><p>首先判断左右两个可以分成什么样的，保存在两个list，然后两个list做笛卡尔积（需要转换成答案要求的样子，（）和，）</p><p>判断一个字符串能写成哪些数字</p><p>​    首先看他有几位，1位的话就是一个数字</p><p>​    如果第一位=0.但是最后一位<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="3.52ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 1555.8 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>那么可以把小数点放到第一位</p><p>​    如果第一位<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="3.52ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 1555.8 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>他可以作为一个整体（整数</p><p>​    如果第一位<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="3.52ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 1555.8 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>并且最后一位<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="3.52ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 1555.8 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，那么就可以给小数点插在第一位后面，一直到倒数第二位后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">ambiguousCoordinates</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    s = s.substring(<span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    n = n - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">        ans.addAll(cal(s.substring(<span class="number">0</span>, i), s.substring(i)));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">cal</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">    List&lt;String&gt; left = parse(s1);</span><br><span class="line">    List&lt;String&gt; right = parse(s2);</span><br><span class="line">    List&lt;String&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String item1 : left) {</span><br><span class="line">        <span class="keyword">for</span> (String item2 : right) {</span><br><span class="line">            ret.add(<span class="string">"("</span> + item1 + <span class="string">", "</span> + item2 + <span class="string">")"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">parse</span><span class="params">(String s)</span> {</span><br><span class="line">    List&lt;String&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">        ret.add(s);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (s.charAt(n - <span class="number">1</span>) != <span class="string">'0'</span> &amp;&amp; s.charAt(<span class="number">0</span>) != <span class="string">'0'</span>) {</span><br><span class="line">        <span class="comment">//放小数点</span></span><br><span class="line">        <span class="comment">//小数点放到第i位后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + <span class="string">"."</span> + s.substring(i + <span class="number">1</span>);</span><br><span class="line">            ret.add(num);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (s.charAt(<span class="number">0</span>) == <span class="string">'0'</span> &amp;&amp; s.charAt(n - <span class="number">1</span>) != <span class="string">'0'</span>) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> s.charAt(<span class="number">0</span>) + <span class="string">"."</span> + s.substring(<span class="number">1</span>);</span><br><span class="line">        ret.add(num);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (s.charAt(<span class="number">0</span>) != <span class="string">'0'</span>) {</span><br><span class="line">        ret.add(s);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;816-模糊坐标&quot;&gt;&lt;a href=&quot;#816-模糊坐标&quot; class=&quot;headerlink&quot; title=&quot;816.模糊坐标&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/ambiguous-coordinates/&quot;&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>1620.网络信号最好的坐标</title>
    <link href="http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/1620.%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E6%9C%80%E5%A5%BD%E7%9A%84%E5%9D%90%E6%A0%87/"/>
    <id>http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/1620.%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E6%9C%80%E5%A5%BD%E7%9A%84%E5%9D%90%E6%A0%87/</id>
    <published>2022-11-07T12:08:27.000Z</published>
    <updated>2022-11-07T12:09:50.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1620-网络信号最好的坐标"><a href="#1620-网络信号最好的坐标" class="headerlink" title="1620.网络信号最好的坐标"></a><a href="https://leetcode.cn/problems/coordinate-with-maximum-network-quality/">1620.网络信号最好的坐标</a></h1><p>先找到上下左右的边界</p><p>然后更新每一座塔的辐射范围内的数值</p><p>然后取grid中最大的坐标（按行列遍历即可，字典序信息没用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1620-网络信号最好的坐标&quot;&gt;&lt;a href=&quot;#1620-网络信号最好的坐标&quot; class=&quot;headerlink&quot; title=&quot;1620.网络信号最好的坐标&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/coordi</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>1668.最大重复子字符串</title>
    <link href="http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/1668.%E6%9C%80%E5%A4%A7%E9%87%8D%E5%A4%8D%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/1668.%E6%9C%80%E5%A4%A7%E9%87%8D%E5%A4%8D%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-11-07T12:02:27.000Z</published>
    <updated>2022-11-07T12:06:13.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1668-最大重复子字符串"><a href="#1668-最大重复子字符串" class="headerlink" title="1668.最大重复子字符串"></a><a href="https://leetcode.cn/problems/maximum-repeating-substring/">1668.最大重复子字符串</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxRepeating</span><span class="params">(String sequence, String word)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sequence.length(), m = word.length();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; m) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//判断以i结尾的前面的若干字符是否是word</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (sequence.charAt(i - m + j + <span class="number">1</span>) != word.charAt(j)) {</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (valid) {</span><br><span class="line">            <span class="comment">//如果以i结尾的前i个字符是word，就直接更新dp[i]</span></span><br><span class="line">            dp[i] = (i == m - <span class="number">1</span> ? <span class="number">0</span> : dp[i - m]) + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(dp).max().getAsInt();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>dp</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1668-最大重复子字符串&quot;&gt;&lt;a href=&quot;#1668-最大重复子字符串&quot; class=&quot;headerlink&quot; title=&quot;1668.最大重复子字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-r</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>1106.解析布尔表达式</title>
    <link href="http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/1106.%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/11/07/LeetCode%E5%88%B7%E9%A2%98/1106.%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-11-07T11:59:27.000Z</published>
    <updated>2022-11-07T12:06:24.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1106-解析布尔表达式"><a href="#1106-解析布尔表达式" class="headerlink" title="1106.解析布尔表达式"></a><a href="https://leetcode.cn/problems/parsing-a-boolean-expression/">1106.解析布尔表达式</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">parseBoolExpr</span><span class="params">(String expression)</span> {</span><br><span class="line">    <span class="type">char</span>[] str = expression.toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length;</span><br><span class="line">    <span class="type">char</span>[] stack = <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">    <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : str) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">','</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">')'</span>) {</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (stack[--tail] != <span class="string">'('</span>) {</span><br><span class="line">                flag1 = flag1 &amp;&amp; (stack[tail] == <span class="string">'t'</span>);</span><br><span class="line">                flag2 = flag2 || (stack[tail] == <span class="string">'t'</span>);</span><br><span class="line">            }</span><br><span class="line">            tail--;</span><br><span class="line">            <span class="keyword">if</span> (stack[tail] == <span class="string">'!'</span>) {</span><br><span class="line">                stack[tail] = flag1 ? <span class="string">'f'</span> : <span class="string">'t'</span>;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (stack[tail] == <span class="string">'&amp;'</span>) {</span><br><span class="line">                stack[tail] = flag1 ? <span class="string">'t'</span> : <span class="string">'f'</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                stack[tail] = flag2 ? <span class="string">'t'</span> : <span class="string">'f'</span>;</span><br><span class="line">            }</span><br><span class="line">            tail++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stack[tail++] = c;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> stack[tail - <span class="number">1</span>] == <span class="string">'t'</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>前缀表达式</p><p>想多了当时， 直接用stack就好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1106-解析布尔表达式&quot;&gt;&lt;a href=&quot;#1106-解析布尔表达式&quot; class=&quot;headerlink&quot; title=&quot;1106.解析布尔表达式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/parsing-a-bo</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>美团实习一面</title>
    <link href="http://example.com/2022/11/07/%E9%9D%A2%E7%BB%8F/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
    <id>http://example.com/2022/11/07/%E9%9D%A2%E7%BB%8F/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</id>
    <published>2022-11-07T11:16:27.000Z</published>
    <updated>2022-11-11T12:24:42.058Z</updated>
    
    <content type="html"><![CDATA[<p>等有空把不会的全补上</p><p>写了个题</p><ol type="1"><li>判断一个字符串是否是一个回文字符串</li></ol><p>写了两个sql</p><ol type="1"><li><p>第一个是groupby+取平均值+排序（不会</p></li><li><p>where的单表查询（简单</p></li></ol><p>还是介绍项目</p><p>Nginx怎么实现负载均衡</p><p>在介绍短信验证码登录时讲了通过sdk来防止滥发的情况（过期时间</p><p>一人一单（一人同时只能下一单+已经存在订单也不可以下单</p><p>分布式锁讲了redisson，提了watch dog机制</p><p>这块的逻辑我说完面试小哥用它的语言又复述了一遍（get学到</p><p>说了用了消息队列，面试官提问延迟问题怎么办，消息队列一定会有延迟，如果重复下单了怎么办？</p><p>答：分布式锁在在消息队列时才进行释放</p><p>好友关注功能（redis数据结构set</p><p>假如有人注销账号了，那关注模块怎么处理？</p><p>答：没有实现，但是我觉得应该怎么样怎么样，除了保存用户关注了哪些用户set1，同时要保存某个用户被哪些用户关注了set2（可以实现</p><p>当删除用户时，需要查找set2，然后根据set2中的用户信息修改set1中的信息</p><p>如果某个优惠券使用了但是出现了故障在表中没删怎么办？</p><p>我不会，面试小哥答：定期扫表</p><p>消息队列的生产者消费者的速度不一致问题：（如生产者10000，消费者5000</p><ul><li>使用两个消费者监听这个队列</li><li>生产者的消息在交换机中分到两个队列中去</li></ul><p>问了redis的数据结构（没问跳表</p><p>IOC和AOP简单说下（然后直接说只学到这里</p><p>针对一个表如学生和课程怎么建索引</p><p>答：联合索引，然后分析了哪个在第一位的效率高（说错了</p><p>紧接着问了联合索引的失效情况</p><p>SpringMVC和SpringBoot的区别</p><p>redis的持久化</p><p>TCP和UDP的区别，举例什么情况用的TCP或UDP（答的视频UDP，比如微信TCP但后来改了一下说即使用的不是TCP也实现了类似TCP的可靠传输的机制</p><p>拥塞控制</p><p>超时重传</p><p>ack的确认机制</p><p>HTTP和https的区别：https加了ssl层加密更安全，然后更详细的不知道了</p><p>hashmap的机制（扩容，hash，负载因子，链表——红黑树</p><p>linux：查看目录（ls，ll）、查看端口（lsof）、编辑文件（vi）</p><p><strong>红黑树和二叉树的区别</strong>——这个完全不会</p><p>又问了兴趣爱好，玩游戏读书啥的（可以跳过</p><p>部门是美团app，如订单登录等</p><p>黑马点评yyds，给面试的两家大（中）厂全是相关业务的部门</p><h2 id="总结">总结</h2><p>美团竟然是除阿里外用java最多的厂了（不是我说的，面试小哥说的），但是却几乎基本一点java相关的八股都没问</p><p>面试体验极好，其实部分答得并不好</p><p>实习对算法的要求很低</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;等有空把不会的全补上&lt;/p&gt;
&lt;p&gt;写了个题&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;判断一个字符串是否是一个回文字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写了两个sql&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;第一个是groupby+取平均值+排序（</summary>
      
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>滴滴实习二面</title>
    <link href="http://example.com/2022/11/02/%E9%9D%A2%E7%BB%8F/%E6%BB%B4%E6%BB%B4%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/"/>
    <id>http://example.com/2022/11/02/%E9%9D%A2%E7%BB%8F/%E6%BB%B4%E6%BB%B4%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/</id>
    <published>2022-11-02T12:25:27.000Z</published>
    <updated>2022-11-02T12:37:21.832Z</updated>
    
    <content type="html"><![CDATA[<p>手写了个</p><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h4><p>还有个多线程编程，生产者消费者问题</p><h2 id="场景题"><a href="#场景题" class="headerlink" title="场景题"></a>场景题</h2><p>写的项目的数据库</p><p>需要注意的是秒杀券和普通券在流程上并没有区别</p><p>设计邀请五人得优惠的场景（接口，数据库）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;手写了个&lt;/p&gt;
&lt;h4 id=&quot;3-无重复字符的最长子串&quot;&gt;&lt;a href=&quot;#3-无重复字符的最长子串&quot; class=&quot;headerlink&quot; title=&quot;3. 无重复字符的最长子串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems</summary>
      
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>滴滴实习一面</title>
    <link href="http://example.com/2022/11/01/%E9%9D%A2%E7%BB%8F/%E6%BB%B4%E6%BB%B4%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
    <id>http://example.com/2022/11/01/%E9%9D%A2%E7%BB%8F/%E6%BB%B4%E6%BB%B4%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</id>
    <published>2022-11-01T05:37:27.000Z</published>
    <updated>2022-11-02T12:25:10.183Z</updated>
    
    <content type="html"><![CDATA[<p>笔试给了一个大场景题，然后讲述了场景题的思路</p><p>G1垃圾回收器</p><p>使用多线程排序</p><p>面试官挺好，问了线程怎么传参竟然告诉我了。线程直接运行会产生null的结果，还让我尝试sleep，然后引导去想到信号量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;笔试给了一个大场景题，然后讲述了场景题的思路&lt;/p&gt;
&lt;p&gt;G1垃圾回收器&lt;/p&gt;
&lt;p&gt;使用多线程排序&lt;/p&gt;
&lt;p&gt;面试官挺好，问了线程怎么传参竟然告诉我了。线程直接运行会产生null的结果，还让我尝试sleep，然后引导去想到信号量&lt;/p&gt;
</summary>
      
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>934.最短的桥</title>
    <link href="http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/934.%E6%9C%80%E7%9F%AD%E7%9A%84%E6%A1%A5/"/>
    <id>http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/934.%E6%9C%80%E7%9F%AD%E7%9A%84%E6%A1%A5/</id>
    <published>2022-10-30T13:56:27.000Z</published>
    <updated>2022-10-30T13:33:59.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最短的桥"><a href="https://leetcode.cn/problems/shortest-bridge/">934.最短的桥</a></h1><p>先遍历一遍找到两个岛，同时记录两个岛的所有的点</p><p>对两个岛的所有节点两两判断，得到最短的距离</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最短的桥&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/shortest-bridge/&quot;&gt;934.
最短的桥&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;先遍历一遍找到两个岛，同时记录两个岛的所有的点&lt;/p&gt;
&lt;p&gt;对两个岛的所有节点两两判断，</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>901.股票价格跨度</title>
    <link href="http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/901.%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/"/>
    <id>http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/901.%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/</id>
    <published>2022-10-30T13:43:27.000Z</published>
    <updated>2022-10-30T13:50:13.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="股票价格跨度"><a href="https://leetcode.cn/problems/online-stock-span/">901.股票价格跨度</a></h1><p>找价格小于等于今天的价格的最大连续日数</p><p>假设当前的price，则栈中比price小的都会被弹出，左侧一定是个比price大的值</p><p>然后把price放入了栈顶</p><p>如果明天的值price</p><ul><li><p>比price小，那么一定股票的跨度直接就为1</p></li><li><p>比price大，那么前一天弹出的一定也会弹出，所以就不会对ans产生影响，同时会根据这个price继续向栈的左侧进行判断</p></li></ul><p>为了获得两个天数之间的差值，在栈中记录price的同时还应该记录当前是第i天，同时将price和id插入到栈中，当前天数i和栈顶的天数就可以很容易的求出ans</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;股票价格跨度&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/online-stock-span/&quot;&gt;901.股票价格跨度&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;找价格小于等于今天的价格的最大连续日数&lt;/p&gt;
&lt;p&gt;假设当前的price，则栈中</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="单调栈" scheme="http://example.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>915.分割数组</title>
    <link href="http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/915.%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/915.%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84/</id>
    <published>2022-10-30T13:37:27.000Z</published>
    <updated>2022-10-30T13:39:37.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分割数组"><a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/">915.分割数组</a></h1><p>将一个数组划分为两个连续数组left和right</p><p>使left中的每个元素都<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span>right中的每个元素</p><p>从右向左遍历，找到每个位置最小值</p><p>从左往右遍历，找到left的最大值，如果最大值小于等于当前位置的可能最小值，那么就是ans</p><p>如果找不到就是返回-1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分割数组&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/partition-array-into-disjoint-intervals/&quot;&gt;915.分割数组&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;将一个数组划分为两个连续数组left和right</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>907.子数组的最小值之和</title>
    <link href="http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/907.%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E4%B9%8B%E5%92%8C/"/>
    <id>http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/907.%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E4%B9%8B%E5%92%8C/</id>
    <published>2022-10-30T13:14:27.000Z</published>
    <updated>2022-10-30T13:27:26.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子数组的最小值之和">[<a href="https://leetcode.cn/problems/sum-of-subarray-minimums/">907.子数组的最小值之和</a>]</h1><p>设s[j][i]表示子数组<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.333ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12081.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1258,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1709,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1987,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2399,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2677,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3121.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3650.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4101.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4552.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4830.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(5464.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6465.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6965.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(7243.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7687.8,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(9026.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9471.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(10000.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10451.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10902.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(11180.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11525.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11803.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>的最小值，则可以推出所有连续子数组的最小值之和为</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex;" xmlns="http://www.w3.org/2000/svg" width="12.578ex" height="6.908ex" role="img" focusable="false" viewBox="0 -1720.9 5559.3 3053.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(58,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="munderover" transform="translate(1610.7,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(600,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3221.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(3690.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3968.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4313.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4591.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4869.3,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(5281.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p><p>对于每个以i为最右的子数组最小值之和为<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex;" xmlns="http://www.w3.org/2000/svg" width="8.934ex" height="6.9ex" role="img" focusable="false" viewBox="0 -1717.4 3948.7 3049.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(600,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1610.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2079.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2357.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2702.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2980.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3258.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3670.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>,将其记为dp[i]</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.654ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12222.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1646,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2201.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3257.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3777.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4280.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4558.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5125.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6126,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(6647,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(7147.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8147.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(8890.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(9890.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(10419.9,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10870.9,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11321.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(11599.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11944.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumSubarrayMins</span><span class="params">(<span class="type">int</span>[] arr)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Deque&lt;Integer&gt; monoStack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">while</span> (!monoStack.isEmpty() &amp;&amp; arr[monoStack.peek()] &gt; arr[i]) {</span><br><span class="line">            monoStack.pop();</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> monoStack.isEmpty() ? (i + <span class="number">1</span>) : (i - monoStack.peek());</span><br><span class="line">        dp[i] = k * arr[i] + (monoStack.isEmpty() ? <span class="number">0</span> : dp[i - k]);</span><br><span class="line">        ans = (ans + dp[i]) % MOD;</span><br><span class="line">        monoStack.push(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;子数组的最小值之和&quot;&gt;[&lt;a href=&quot;https://leetcode.cn/problems/sum-of-subarray-minimums/&quot;&gt;907.
子数组的最小值之和&lt;/a&gt;]&lt;/h1&gt;
&lt;p&gt;设s[j][i]表示子数组&lt;span class=</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="单调栈" scheme="http://example.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>862.和至少为K的最短子数组</title>
    <link href="http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/862.%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BAK%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/862.%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BAK%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2022-10-30T13:03:27.000Z</published>
    <updated>2022-10-30T13:07:28.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="和至少为k的最短子数组"><a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/">862.和至少为K的最短子数组</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestSubarray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">long</span>[] preSumArr = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        preSumArr[i + <span class="number">1</span>] = preSumArr[i] + nums[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> n + <span class="number">1</span>;</span><br><span class="line">    Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="type">long</span> <span class="variable">curSum</span> <span class="operator">=</span> preSumArr[i];</span><br><span class="line">        <span class="comment">//遍历到sum[i],左面有一个s[j],且s[i]-s[j]&gt;=k,</span></span><br><span class="line">        <span class="comment">//那么无论无论s[i]右面的数字是大是小</span></span><br><span class="line">        <span class="comment">//都不可能得到一个把比j当做左端点，长度比i-j更短的子数组</span></span><br><span class="line">        <span class="comment">//弹出并更新ans</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; curSum - preSumArr[queue.peekFirst()] &gt;= k) {</span><br><span class="line">            res = Math.min(res, i - queue.pollFirst());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//当前的s[i]比最右端的s[i]小，那么后续当前的s[i]肯定更短</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; preSumArr[queue.peekLast()] &gt;= curSum) {</span><br><span class="line">            queue.pollLast();</span><br><span class="line">        }</span><br><span class="line">        queue.offerLast(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res &lt; n + <span class="number">1</span> ? res : -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202210302106964.png" alt="image-20221030210607938"><figcaption aria-hidden="true">image-20221030210607938</figcaption></figure><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/202210302106572.png" alt="image-20221030210636544"><figcaption aria-hidden="true">image-20221030210636544</figcaption></figure><p>时间复杂度仅为O(n)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;和至少为k的最短子数组&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/&quot;&gt;862.和至少为K的最短子数组&lt;/a&gt;&lt;/h1&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="单调栈" scheme="http://example.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>784.字母大小写全排列</title>
    <link href="http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <id>http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/</id>
    <published>2022-10-30T13:00:27.000Z</published>
    <updated>2022-10-30T13:01:26.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字母大小写全排列"><a href="https://leetcode.cn/problems/letter-case-permutation/">784.字母大小写全排列</a></h1><p>要求返回所有可能的字符串的集合，并且顺序无限制</p><p>DFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(StringBuilder sb, <span class="type">int</span> i)</span> {</span><br><span class="line">    <span class="keyword">if</span> (i == n) {</span><br><span class="line">        ans.add(sb.toString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">    DFS(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sb.toString()).append(c1), i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (c1 &gt; <span class="string">'9'</span>) {</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> (c1 &gt;= <span class="string">'a'</span> &amp;&amp; c1 &lt;= <span class="string">'z'</span>) ? (<span class="type">char</span>) (c1 - <span class="number">32</span>) : (<span class="type">char</span>) (c1 + <span class="number">32</span>);</span><br><span class="line">        DFS(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sb.toString()).append(c2), i + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>需要每次都new一个StringBuilder</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字母大小写全排列&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/letter-case-permutation/&quot;&gt;784.字母大小写全排列&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;要求返回所有可能的字符串的集合，并且顺序无限制&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>1235.规划兼职工作</title>
    <link href="http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/1235.%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/"/>
    <id>http://example.com/2022/10/30/LeetCode%E5%88%B7%E9%A2%98/1235.%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C/</id>
    <published>2022-10-30T12:47:27.000Z</published>
    <updated>2022-10-30T12:56:30.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="规划兼职工作"><a href="https://leetcode.cn/problems/maximum-profit-in-job-scheduling/">1235.规划兼职工作</a></h1><p>先将所有的兼职工作信息保存到一个数组中，然后对这个数组进行排序，按结束时间从小到大排序</p><p>dp[i]表示前i份兼职工作可以获得的最大报酬</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="comment">//k表示前满足结束时间小于等于第i-1份工作开始时间的最大dp[i]</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> binarySearch(jobs, i - <span class="number">1</span>, jobs[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[k] + arr[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br></pre></td></tr></table></figure><p>i是从1开始的</p><p><code>dp[i] = Math.max(dp[i - 1], dp[k] + arr[i - 1][2]);</code>表示：</p><ol type="1"><li>不选第i-1份工作</li><li>选择第i-1份工作，但是时间需要满足</li></ol><p>其中<code>binarySearch()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * right：搜索的右边界</span></span><br><span class="line"><span class="comment"> * target：找到结束时间&lt;=target（开始时间）的最大值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[][] arr, <span class="type">int</span> right, <span class="type">int</span> target)</span></span><br></pre></td></tr></table></figure><p>最后返回dp[n]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;规划兼职工作&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-profit-in-job-scheduling/&quot;&gt;1235.规划兼职工作&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;先将所有的兼职工作信息保存到一个数组中，然后对这个数</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>MoKa实习二面</title>
    <link href="http://example.com/2022/10/28/%E9%9D%A2%E7%BB%8F/MoKa%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/"/>
    <id>http://example.com/2022/10/28/%E9%9D%A2%E7%BB%8F/MoKa%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/</id>
    <published>2022-10-28T06:02:27.000Z</published>
    <updated>2022-11-01T10:59:16.463Z</updated>
    
    <content type="html"><![CDATA[<p>聊了很多项目</p><p>主要记下答得不好的点</p><ul><li>短信验证码登录怎么防止用户恶意刷：</li></ul><p>腾讯云SDK中提供了限制发送短信的策略：如30秒发1次，30分钟发5次，一天发10次这种</p><p>可以对此进行实现，给出提示</p><p>复盘时觉得这个问题有点没营养了</p><ul><li>session和cookie的区别</li></ul><p>面试中提到了session提到了数据库中，但是没有想到spring session</p><ul><li>手写了一个查两个表的sql</li></ul><p>竟然没写出来</p><p>select d1.department_id,d2.id from people d1,department d2 where d1.department_id=d2.id;</p><p>竟然是忘记了字段之间的逗号和表之间的逗号导致运行不了</p><ul><li>手写了一个单例，写出来了但是双重检查锁版本忘记怎么写了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> { </span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line"><span class="comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="comment">//抢到锁之后再次判断是否为null</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p><p><strong>分配空间——赋值，空间的地址已经给他了，但是里面的属性可能还没赋值完毕</strong></p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><p>问了太多的项目了</p><ul><li>数据库隔离级别</li></ul><p>可重复读</p><p>可以防止脏读</p><p>但是防止幻读，多版本并发控制（mvcc）+Next-key</p><ul><li>redis的扣减问题</li></ul><p>确实比数据库快，但是怎么保证并发时读数据不会出问题</p><p>表述中用了太多<strong>应该</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;聊了很多项目&lt;/p&gt;
&lt;p&gt;主要记下答得不好的点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短信验证码登录怎么防止用户恶意刷：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;腾讯云SDK中提供了限制发送短信的策略：如30秒发1次，30分钟发5次，一天发10次这种&lt;/p&gt;
&lt;p&gt;可以对此进行实现，给出提示&lt;/</summary>
      
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
</feed>
