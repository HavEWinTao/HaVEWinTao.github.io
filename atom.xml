<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>樊tastic~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-27T15:18:44.801Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>樊tastic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MoKa实习一面</title>
    <link href="http://example.com/2022/10/27/%E9%9D%A2%E7%BB%8F/MoKa%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
    <id>http://example.com/2022/10/27/%E9%9D%A2%E7%BB%8F/MoKa%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</id>
    <published>2022-10-27T05:37:27.000Z</published>
    <updated>2022-10-27T15:18:44.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="moka实习一面">MoKa实习一面</h1><p>自我介绍需要强化一下</p><p><strong>记大学以来的第一次面试——2022.10.27</strong></p><h2 id="项目相关">项目相关</h2><p>第二个项目不会问</p><p>第一个可以再描述的详细些</p><h2 id="java">Java</h2><ol type="1"><li>多线程</li></ol><ul><li>runable——没有返回值，重写run方法，通过Thread实例的start来调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">MyRunnable</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">    thread.start();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>callable——有返回值，返回值通过FutureTask来封装，通过FutureTask的get来获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; {</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException {</span><br><span class="line">    <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>继承Thread——实现run方法，因为Thread类也实现了Runable接口，当调用start()方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的run方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">    mt.start();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li><p>线程池——几大参数</p><p>线程池任务抛弃策略</p><p>核心线程--&gt;任务队列--&gt;临时线程——抛弃策略</p></li></ul><ol start="2" type="1"><li><p>为什么使用多线程</p></li><li><p>线程中的拒绝策略有哪些</p></li><li><p>java垃圾回收算法和垃圾回收器</p></li><li><p>Spring和SpringBoot的区别</p></li></ol><p>Spring框架提供了一些很好的功能，如SpringJDBC、SpringMVC、SpringAOP、Spring Test等</p><p>传统开发需要开发人员手动管理对象关系和生命周期，Spring框架提出了两大核心：IOC和AOP，有效地管理了开发中对象的生命周期问题，但是需要大量的xml配置</p><p>SpringBoot是Spring框架的扩展，在Spring基础上进行简化配置和开发流程</p><ul><li><p>内嵌Servlet容器，可以直接打成jar包，通过java直接运行</p></li><li><p>通过starterpom系列，简化maven的依赖加载，减少依赖冲突的发生</p></li><li><p>支持自动化配置</p></li></ul><ol start="6" type="1"><li>Java的锁</li></ol><h2 id="mysql">MySQL</h2><ol type="1"><li>Mysql的B+树</li></ol><p><strong>叶子结点的链表是双向的？应该是单向的？where在一个范围，这种怎么查找</strong></p><p>叶子结点中的数据是通过单向链表连接的</p><p>B+树中各个页之间是通过双向链表连接的</p><p>假设搜索<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="7.237ex" height="1.882ex" role="img" focusable="false" viewBox="0 -694 3198.6 832"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1142.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(2198.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span>且<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="7.237ex" height="1.661ex" role="img" focusable="false" viewBox="0 -694 3198.6 734"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1142.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(2198.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span>，这种where的搜索流程</p><p>一般来说，根节点是常驻内存的，也就是第一页已经在内存中了，该页就不需要到磁盘中读取数据了，可以省下一次IO</p><ol type="1"><li><p>首先在页1中找到已经在内存中，从页1中可以找到键值18，然后根据这个指针定位到页3</p></li><li><p>从磁盘中找到页3，将这个页放入内存中，再进行查找，可以找到键值18，然后根据这个指针定位到页8</p></li><li><p>同样得从磁盘中找到页8，读取到内存中去。此时该节点也叶子结点只存放数据，并且键值是按照顺序存放的，所以可以根据<strong>TODO:二分查找(为什么是二分啊)</strong>定位到键值18，从而找到键值18对应的数据</p></li><li><p>因为是范围查找，所以可以从页8中依次遍历，查找满足条件的数据，可以一直找到键值为22的数据，然后页8中已经没有数据了，但是可以通过页8找到页9</p></li><li><p>页9不在内存中，加载到内存中继续查找</p></li><li><p>最后加载到页12时，发现41大于40，所以不满足条件查询到此中止</p></li></ol><figure><img src="https://fht-1257712754.cos.ap-beijing.myqcloud.com/image-20221027224642073.png" alt="image-20221027224642073"><figcaption aria-hidden="true">image-20221027224642073</figcaption></figure><p>聚集索引一定会有一个（主键索引）</p><p>其他索引的结点存的是主键</p><ol start="2" type="1"><li>联合索引（索引失效问题）</li></ol><h2 id="redis">Redis</h2><ol type="1"><li>Redis持久化</li><li>Redis分布式锁</li></ol><h2 id="消息队列">消息队列</h2><ol type="1"><li>消息队列的作用</li></ol><p>异步 削峰 解耦</p><h2 id="linux">linux</h2><ol type="1"><li>linux怎么编辑文件</li></ol><h2 id="其他">其他</h2><ol type="1"><li>常见的设计模式</li></ol><h2 id="代码">代码</h2><p>Department = {id,pid,name}，分别表示部门id，部门父id，部门名称</p><p>如{1,0,"研发中心"},{2,1,"后端开发中心"},{3,1,"前端开发中心"},{4,2,"后端实习小组"}</p><p>输入是一个保存Department的List</p><p>实现根据id，查询该id的所有子部门的功能：</p><p>BFS+HashMap&lt;id,index&gt;，id是部门id，index是在list中的下标，这样就是O(n)的时间复杂度</p><p>我写的没用HashMap，所以时间复杂度是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><h2 id="评价">评价</h2><p>问的不深，但是问的很多，手撕代码环节基本可以忽略</p><ol type="1"><li><p>mysql的where查找</p></li><li><p>联合索引</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;moka实习一面&quot;&gt;MoKa实习一面&lt;/h1&gt;
&lt;p&gt;自我介绍需要强化一下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记大学以来的第一次面试——2022.10.27&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目相关&quot;&gt;项目相关&lt;/h2&gt;
&lt;p&gt;第二个项目不会问&lt;/p</summary>
      
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>1441.用栈操作构建数组</title>
    <link href="http://example.com/2022/10/21/LeetCode%E5%88%B7%E9%A2%98/1441.%E7%94%A8%E6%A0%88%E6%93%8D%E4%BD%9C%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/10/21/LeetCode%E5%88%B7%E9%A2%98/1441.%E7%94%A8%E6%A0%88%E6%93%8D%E4%BD%9C%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/</id>
    <published>2022-10-21T01:25:27.000Z</published>
    <updated>2022-10-21T01:28:24.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用栈操作构建数组"><a href="https://leetcode.cn/problems/build-an-array-with-stack-operations/">1441.用栈操作构建数组</a></h1><p>用一个指针标记目标序列list[]的大小</p><p>从n中依次取数据，如果当前向栈中push的小于list[i]，就直接pop</p><p>如果和list[i]相等，则i指向下一个数</p><p>直到构造完list</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用栈操作构建数组&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/build-an-array-with-stack-operations/&quot;&gt;1441.用栈操作构建数组&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;用一个指针标记目标序列list[]的</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>904.水果成篮</title>
    <link href="http://example.com/2022/10/21/LeetCode%E5%88%B7%E9%A2%98/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/"/>
    <id>http://example.com/2022/10/21/LeetCode%E5%88%B7%E9%A2%98/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</id>
    <published>2022-10-21T01:22:27.000Z</published>
    <updated>2022-10-21T01:24:09.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="水果成篮"><a href="https://leetcode.cn/problems/fruit-into-baskets/">904.水果成篮</a></h1><p>滑动窗口</p><p>i，j从0开始j向右走，直到不满足条件，然后a向右走直到满足条件</p><p>同时更新ans</p><p>当j走到最后时返回ans</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;水果成篮&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/fruit-into-baskets/&quot;&gt;904.水果成篮&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;滑动窗口&lt;/p&gt;
&lt;p&gt;i，j从0开始j向右走，直到不满足条件，然后a向右走直到满足条件</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="滑动窗口" scheme="http://example.com/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>779.第K个语法符号</title>
    <link href="http://example.com/2022/10/21/LeetCode%E5%88%B7%E9%A2%98/779.%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/"/>
    <id>http://example.com/2022/10/21/LeetCode%E5%88%B7%E9%A2%98/779.%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/</id>
    <published>2022-10-21T01:00:27.000Z</published>
    <updated>2022-10-21T01:02:42.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第k个语法符号httpsleetcode.cnproblemsk-th-symbol-in-grammar">(779.第K个语法符号)[https://leetcode.cn/problems/k-th-symbol-in-grammar/]</h1><p>递归</p><p>如果k大于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.323ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1910.9 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container></span>,就取他对称位置的值，同时n-1</p><p>注意n在偶数的时候k要取反</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第k个语法符号httpsleetcode.cnproblemsk-th-symbol-in-grammar&quot;&gt;(779.第K个语法符号)[https://leetcode.cn/problems/k-th-symbol-in-grammar/]&lt;/h1&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>886.可能的二分法</title>
    <link href="http://example.com/2022/10/20/LeetCode%E5%88%B7%E9%A2%98/886.%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>http://example.com/2022/10/20/LeetCode%E5%88%B7%E9%A2%98/886.%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2022-10-20T15:26:27.000Z</published>
    <updated>2022-10-20T15:30:08.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可能的二分法httpsleetcode.cnproblemspossible-bipartition">(886.可能的二分法)[https://leetcode.cn/problems/possible-bipartition/]</h1><p>先建图</p><p>然后声明一个颜色数组color[n]</p><p>然后搜索，如果没颜色就赋值1，</p><p>对于一对结点，如果是1就赋值2，如果是2就赋值1</p><p><code>color[next] = 3 ^ color[t];</code></p><p>如果某一对结点的颜色相同了，就返回false</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;可能的二分法httpsleetcode.cnproblemspossible-bipartition&quot;&gt;(886.可能的二分法)[https://leetcode.cn/problems/possible-bipartition/]&lt;/h1&gt;
&lt;p&gt;先建图&lt;/p</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>769.最多能完成排序的块</title>
    <link href="http://example.com/2022/10/20/LeetCode%E5%88%B7%E9%A2%98/769.%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/"/>
    <id>http://example.com/2022/10/20/LeetCode%E5%88%B7%E9%A2%98/769.%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/</id>
    <published>2022-10-20T15:19:27.000Z</published>
    <updated>2022-10-20T15:25:09.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最多能完成排序的块httpsleetcode.cnproblemsmax-chunks-to-make-sorted">(769.最多能完成排序的块)[https://leetcode.cn/problems/max-chunks-to-make-sorted/]</h1><p>因为是[0,n-1]</p><p>到下标为i时，如果当前值的最大值是i，就说明可以排序，就可以完成一个分块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        max = Math.max(max, arr[i]);</span><br><span class="line">        <span class="keyword">if</span> (max == i) {</span><br><span class="line">            dp[i + <span class="number">1</span>] = dp[i] + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dp[i + <span class="number">1</span>] = dp[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最多能完成排序的块httpsleetcode.cnproblemsmax-chunks-to-make-sorted&quot;&gt;(769.最多能完成排序的块)[https://leetcode.cn/problems/max-chunks-to-make-sorted/]</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>1700.countStudents</title>
    <link href="http://example.com/2022/10/20/LeetCode%E5%88%B7%E9%A2%98/1700.countStudents/"/>
    <id>http://example.com/2022/10/20/LeetCode%E5%88%B7%E9%A2%98/1700.countStudents/</id>
    <published>2022-10-20T15:07:27.000Z</published>
    <updated>2022-10-20T15:11:10.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="countstudentshttpsleetcode.cnproblemsnumber-of-students-unable-to-eat-lunch">(1700.countStudents)[https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/]</h1><p>这个就不能按照题目描述的思路来模拟</p><p>可以先计算吃圆形和方形的的学生的数量m0，m1</p><p>然后将所有的三明治按栈模拟，如果有学生就这种学生的数量-1，如果没有学生想吃栈顶的就结束了</p><p>返回当前m0+m1的和作为ans</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;countstudentshttpsleetcode.cnproblemsnumber-of-students-unable-to-eat-lunch&quot;&gt;(1700.countStudents)[https://leetcode.cn/problems/numbe</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>数位dp</title>
    <link href="http://example.com/2022/10/19/%E5%85%B6%E4%BB%96/%E6%95%B0%E4%BD%8Ddp/"/>
    <id>http://example.com/2022/10/19/%E5%85%B6%E4%BB%96/%E6%95%B0%E4%BD%8Ddp/</id>
    <published>2022-10-19T10:53:27.000Z</published>
    <updated>2022-10-20T03:00:27.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数位dp">数位dp</h1><h2 id="题单">题单</h2><h3 id="统计特殊整数"><a href="https://leetcode.cn/problems/count-special-integers/">2376.统计特殊整数</a></h3><h4 id="题目描述">题目描述</h4><p>如果一个正整数每一个数位都是互不相同的，称它是 特殊整数</p><p>输入一个正整数n，返回区间[1,n]之间特殊整数的数目</p><h4 id="解题思路">解题思路</h4><p>需要解决的问题</p><ul><li>限制数的大小</li><li>前导0，如010怎么办？不能算重复</li></ul><p>s是一个数字，就是n，不过转换成字符串形式</p><p><code>f(i,mask,isLimit,isNum)</code></p><p>返回从i开始填数字，i前面填的数字的集合时mask，能构造出的特殊整数的数目</p><p>isLimit表示前面填的数字是否都是n对应位上的，如果为true，那么当前位至多为int(s[i]),否则至多为9,(就是判断是不是第一位，如123，第一位只能为0或者1，之后就可以使0-9了)</p><p>isNum表示当前是否填过数字了 - 如果为true，那么当前位可以从0开始 -如果为false，那么可以直接跳过或者从1开始填数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] s;</span><br><span class="line"><span class="type">int</span>[][] dp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSpecialNumbers</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    s = Integer.toString(n).toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length;</span><br><span class="line">    dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">1</span> &lt;&lt; <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">        Arrays.fill(dp[i], -<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> mask, <span class="type">boolean</span> isLimit, <span class="type">boolean</span> isNum)</span> {</span><br><span class="line">    <span class="keyword">if</span> (i == s.length) {</span><br><span class="line">        <span class="keyword">return</span> isNum ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//记忆化搜索</span></span><br><span class="line">    <span class="keyword">if</span> (!isLimit &amp;&amp; isNum &amp;&amp; dp[i][mask] &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> dp[i][mask];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isNum) {</span><br><span class="line">        <span class="comment">// 可以跳过当前数位，就是不填数字</span></span><br><span class="line">        res = f(i + <span class="number">1</span>, mask, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 枚举要填入的数字d</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> isNum ? <span class="number">0</span> : <span class="number">1</span>, up = isLimit ? s[i] - <span class="string">'0'</span> : <span class="number">9</span>; d &lt;= up; ++d) {</span><br><span class="line">        <span class="comment">// d 不在 mask 中</span></span><br><span class="line">        <span class="keyword">if</span> ((mask &gt;&gt; d &amp; <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">            res += f(i + <span class="number">1</span>, mask | (<span class="number">1</span> &lt;&lt; d), isLimit &amp;&amp; d == up, <span class="literal">true</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!isLimit &amp;&amp; isNum) {</span><br><span class="line">        dp[i][mask] = res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="最大为n的数字组合"><a href="https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/">902.最大为N的数字组合</a></h3><h3 id="数字1的个数"><a href="https://leetcode.cn/problems/number-of-digit-one/">233.数字1的个数</a></h3><h3 id="出现的次数"><a href="https://leetcode.cn/problems/number-of-2s-in-range-lcci/">17.06.2出现的次数</a></h3><h3 id="至少有1位重复的数字"><a href="https://leetcode.cn/problems/numbers-with-repeated-digits/">1012.至少有1位重复的数字</a></h3><h3 id="不含连续1的非负整数"><a href="https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/">600.不含连续1的非负整数</a></h3><h2 id="模板">模板</h2><p>可以拿<strong>统计特殊整数</strong>来当模板</p><p><strong>dp的含义</strong>：</p><pre><code>dp[i]表示没有被限制的情况下，所有可能情况的数量</code></pre><p>dp数组可能一维也可能二维</p><p>看更新情况</p><ul><li>如统计特殊整数，每位都是不重复的数，需要在标记多少位的同时标记哪些数使用了，所以需要二维</li><li>如最大为N的数字组合，它只需要标记多少位，所以1维</li><li>数字1的个数，需要标记多少位的同时标记哪些位的位置是1，所以需要二维</li></ul><p>dp需要现在!isLimit的情况下更新</p><p>如果不用dp数组纯深搜大概率会超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> mask, <span class="type">boolean</span> isLimit, <span class="type">boolean</span> isNum)</span> {</span><br><span class="line">    <span class="comment">//能够走到最后一位就说明正确的个数+1</span></span><br><span class="line">    <span class="keyword">if</span> (i == s.length) {</span><br><span class="line">        <span class="keyword">return</span> isNum ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//记忆化搜索</span></span><br><span class="line">    <span class="keyword">if</span> (!isLimit &amp;&amp; isNum &amp;&amp; dp[i][mask] &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> dp[i][mask];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isNum) {</span><br><span class="line">        <span class="comment">// 可以跳过当前数位</span></span><br><span class="line">        res = f(i + <span class="number">1</span>, mask, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 枚举要填入的数字 d</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> isNum ? <span class="number">0</span> : <span class="number">1</span>, up = isLimit ? s[i] - <span class="string">'0'</span> : <span class="number">9</span>; d &lt;= up; ++d) {</span><br><span class="line">        <span class="comment">// d 不在 mask 中</span></span><br><span class="line">        <span class="keyword">if</span> ((mask &gt;&gt; d &amp; <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">            res += f(i + <span class="number">1</span>, mask | (<span class="number">1</span> &lt;&lt; d), isLimit &amp;&amp; d == up, <span class="literal">true</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!isLimit &amp;&amp; isNum) {</span><br><span class="line">        dp[i][mask] = res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>最后调用<code>return f(0, 0, true, false);</code>即可</p><p>需要调整一下输入格式</p><p>第600题很有意思，转换成二进制的s[]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数位dp&quot;&gt;数位dp&lt;/h1&gt;
&lt;h2 id=&quot;题单&quot;&gt;题单&lt;/h2&gt;
&lt;h3 id=&quot;统计特殊整数&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/count-special-integers/&quot;&gt;2376.统计特殊整数&lt;/a&gt;</summary>
      
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>2434.使用机器人打印字典序最小的字符串</title>
    <link href="http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/2434.%E4%BD%BF%E7%94%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%89%93%E5%8D%B0%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/2434.%E4%BD%BF%E7%94%A8%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%89%93%E5%8D%B0%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-10-12T14:43:27.000Z</published>
    <updated>2022-10-12T14:50:51.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用机器人打印字典序最小的字符串"><a href="https://leetcode.cn/problems/using-a-robot-to-print-the-lexicographically-smallest-string/">2434.使用机器人打印字典序最小的字符串</a></h1><p>用一个数组minChar，从后往前遍历，保存在i处，它及其它后面的字符中最小的字符是什么</p><p>用一个栈存字符，从左到右遍历字符串</p><pre><code>while    如果当前栈顶字符小于等于minChar[i]，说明栈顶元素是当前字符及其后面的最小的，应该出栈将这个字符放入栈中</code></pre><p>将栈中剩余的字符出栈，最后生成ans</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">robotWithString</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">char</span>[] minChar = <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">    minChar[n - <span class="number">1</span>] = s.charAt(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        minChar[i] = (<span class="type">char</span>) Math.min(minChar[i + <span class="number">1</span>], s.charAt(i));</span><br><span class="line">    }</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= minChar[i]) {</span><br><span class="line">            sb.append(stack.pop());</span><br><span class="line">        }</span><br><span class="line">        stack.add(s.charAt(i));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">        sb.append(stack.pop());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">}  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用机器人打印字典序最小的字符串&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/using-a-robot-to-print-the-lexicographically-smallest-string/&quot;&gt;2434.使用机器人打印字</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>801.使序列递增的最小交换次数</title>
    <link href="http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/801.%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/"/>
    <id>http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/801.%E4%BD%BF%E5%BA%8F%E5%88%97%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0/</id>
    <published>2022-10-12T14:30:27.000Z</published>
    <updated>2022-10-12T14:37:10.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使序列递增的最小交换次数"><a href="https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/">801.使序列递增的最小交换次数</a></h1><p>让两个数组nums1和nums2严格递增，并且保证一定有结果</p><p>只能nums1[i]和nums2[i]进行交换，所以只有两种情况</p><pre><code>nums1[i] &gt; nums1[i-1]且nums2[i] &gt; nums2[i-1]nums1[i] &gt; nums2[i-1]且nums2[i] &gt; nums1[i-1]</code></pre><p>只满足1、只满足2、1和2同时满足</p><p>分三种情况进行讨论</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag1 &amp;&amp; flag2) {</span><br><span class="line">    a = Math.min(at, bt);</span><br><span class="line">    b = Math.min(bt, at) + <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (flag1) {</span><br><span class="line">    a = at;</span><br><span class="line">    b = bt + <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (flag2) {</span><br><span class="line">    a = bt;</span><br><span class="line">    b = at + <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>i=0时，无论是否交换都为合法状态</p><p>dp[i][0]表示到位置i为止使数组nums1和nums2满足严格递增并且位置i不进行交换操作的最小操作数</p><p>dp[i][1]表示到位置i为止使数组nums1​和nums2满足严格递增并且位置i进行交换操作的最小操作数</p><p>求解每一个状态都只与前一个状态有关，可以用「滚动数组」的方法来进行空间优化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使序列递增的最小交换次数&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/&quot;&gt;801.使序列递增的最小交换次数&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;让两个数组</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>811.子域名访问计数</title>
    <link href="http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/811.%E5%AD%90%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0/"/>
    <id>http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/811.%E5%AD%90%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0/</id>
    <published>2022-10-12T14:27:27.000Z</published>
    <updated>2022-10-12T14:29:00.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子域名访问计数"><a href="https://leetcode.cn/problems/subdomain-visit-count/">811.子域名访问计数</a></h1><p>拿一个全局的ans进行DFS就行了</p><p>麻烦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;子域名访问计数&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/subdomain-visit-count/&quot;&gt;811.子域名访问计数&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;拿一个全局的ans进行DFS就行了&lt;/p&gt;
&lt;p&gt;麻烦&lt;/p&gt;
</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="DFS" scheme="http://example.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>2433.找出前缀异或的原始数组</title>
    <link href="http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/2433.%E6%89%BE%E5%87%BA%E5%89%8D%E7%BC%80%E5%BC%82%E6%88%96%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/2433.%E6%89%BE%E5%87%BA%E5%89%8D%E7%BC%80%E5%BC%82%E6%88%96%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%95%B0%E7%BB%84/</id>
    <published>2022-10-12T14:18:27.000Z</published>
    <updated>2022-10-12T14:25:21.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找出前缀异或的原始数组"><a href="https://leetcode.cn/problems/find-the-original-array-of-prefix-xor/">2433.找出前缀异或的原始数组</a></h1><p>初始化ans</p><p>根据pref[0]可以确定ans[0]</p><p>根据异或的性质可以求得</p><pre><code>ans[i]^pref[i-1]=pref[i] </code></pre><p>两边同时异或pref[i-1]可以得出ans[i]=pref[i]^pref[i-1]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findArray(<span class="type">int</span>[] pref) {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> pref.length;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> pref[<span class="number">0</span>];</span><br><span class="line">    ans[<span class="number">0</span>] = temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">        ans[i] = pref[i] ^ pref[i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">} </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;找出前缀异或的原始数组&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-the-original-array-of-prefix-xor/&quot;&gt;2433.找出前缀异或的原始数组&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;初始化ans&lt;/p&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>870.优势洗牌</title>
    <link href="http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/870.%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/"/>
    <id>http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/870.%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/</id>
    <published>2022-10-12T14:08:27.000Z</published>
    <updated>2022-10-12T14:13:49.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优势洗牌"><a href="https://leetcode.cn/problems/advantage-shuffle/">870.优势洗牌</a></h1><p>将nums2按从小到大的顺序排列</p><p>将nums1中的所有数字放入到treeMap中（key是数字，value是数字出现的次数）</p><p>初始化ans，从0开始填充ans</p><p>找到treeMap中最小的大于nums2[i]的数（map.ceiling(num+1)）</p><p>如果找不到的话就将treeMap中最小的数（firstKey）放到该位置——贪心</p><p>返回ans</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] advantageCount(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums1) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> map.getOrDefault(num, <span class="number">0</span>);</span><br><span class="line">        map.put(num, cnt + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums2[i];</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> map.ceilingKey(num + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>) {</span><br><span class="line">            key = map.firstKey();</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">1</span>) {</span><br><span class="line">            map.remove(key);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            map.put(key, cnt - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        ans[i] = key;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;优势洗牌&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/advantage-shuffle/&quot;&gt;870.优势洗牌&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;将nums2按从小到大的顺序排列&lt;/p&gt;
&lt;p&gt;将nums1中的所有数字放入到treeMa</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="贪心" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>817.链表组件</title>
    <link href="http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/817.%E9%93%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/817.%E9%93%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/</id>
    <published>2022-10-12T14:03:27.000Z</published>
    <updated>2022-10-12T14:05:33.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表组件"><a href="https://leetcode.cn/problems/linked-list-components/">817.链表组件</a></h1><p>将nums中的所有数字保存到一个集合中</p><p>初始化ans为0</p><p>遍历LinkList，连续的一段都存在于set就ans+1（只有1个数字也算）</p><p>返回ans</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numComponents</span><span class="params">(ListNode head, <span class="type">int</span>[] nums)</span> {</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">        set.add(num);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (set.contains(head.val)) {</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; set.contains(head.val)) {</span><br><span class="line">                head = head.next;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表组件&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/linked-list-components/&quot;&gt;817.链表组件&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;将nums中的所有数字保存到一个集合中&lt;/p&gt;
&lt;p&gt;初始化ans为0&lt;/p&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>856.括号的分数</title>
    <link href="http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/856.%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0/"/>
    <id>http://example.com/2022/10/12/LeetCode%E5%88%B7%E9%A2%98/856.%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0/</id>
    <published>2022-10-12T13:55:27.000Z</published>
    <updated>2022-10-12T14:02:21.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="括号的分数"><a href="https://leetcode.cn/problems/score-of-parentheses/">856.括号的分数</a></h1><p>一个输入从整个输入来看肯定可以分为<code>(...1)+(...2)</code>的情况，此时分数就是<code>(...1)</code>的分数加上<code>(...2)</code>的分数</p><p>这样就是分别计算两个部分的分数即可，对输入字符串进行遍历，把两个部分的分数加起来。</p><p>同时每次向更深一层处理可以脱下去一层(),就是将...1的分数乘2</p><p>当字符串只剩()时，它的分数是1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scoreOfParentheses</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'('</span>) {</span><br><span class="line">            left++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            left--;</span><br><span class="line">            <span class="keyword">if</span> (left == <span class="number">0</span>) {</span><br><span class="line">                ans += getScore(s.substring(index, i + <span class="number">1</span>));</span><br><span class="line">                index = i + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="keyword">if</span> (s.length() == <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * scoreOfParentheses(s.substring(<span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;括号的分数&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/score-of-parentheses/&quot;&gt;856.括号的分数&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;一个输入从整个输入来看肯定可以分为&lt;code&gt;(...1)+(...2)&lt;/cod</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="递归" scheme="http://example.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>10.正则表达式匹配</title>
    <link href="http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/10.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/10.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</id>
    <published>2022-10-04T14:21:27.000Z</published>
    <updated>2022-10-04T14:22:48.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式匹配"><a href="https://leetcode.cn/problems/regular-expression-matching/">10.正则表达式匹配</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span>[][] f = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span>) {</span><br><span class="line">                f[i][j] = f[i][j - <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (matches(s, p, i, j - <span class="number">1</span>)) {</span><br><span class="line">                    f[i][j] = f[i][j] || f[i - <span class="number">1</span>][j];</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (matches(s, p, i, j)) {</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f[m][n];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(String s, String p, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'.'</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式匹配&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/regular-expression-matching/&quot;&gt;10.正则表达式匹配&lt;/a&gt;&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;ta</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>2425.所有数对的异或和</title>
    <link href="http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/2425.%E6%89%80%E6%9C%89%E6%95%B0%E5%AF%B9%E7%9A%84%E5%BC%82%E6%88%96%E5%92%8C/"/>
    <id>http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/2425.%E6%89%80%E6%9C%89%E6%95%B0%E5%AF%B9%E7%9A%84%E5%BC%82%E6%88%96%E5%92%8C/</id>
    <published>2022-10-04T14:11:27.000Z</published>
    <updated>2022-10-04T14:15:47.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="所有数对的异或和"><a href="https://leetcode.cn/problems/bitwise-xor-of-all-pairings/">2425.所有数对的异或和</a></h1><p>异或操作，同0异1</p><p>异或满足交换律</p><p>设nums1的长度为m,nums2的长度为n，所有数对进行异或</p><p>如nums1[0]的所有数对为：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="54.076ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 23901.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1561,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2439,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(2908,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3408,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(3686,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(4186,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4464,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4908.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5508.7,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6080.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6958.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(7427.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7927.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(8205.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8705.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(8983.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9372.7,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g><g data-mml-node="mo" transform="translate(10372.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10817.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(11262,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11706.7,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g><g data-mml-node="mo" transform="translate(12706.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(13095.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13695.7,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14267.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15145.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(15614.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16114.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(16392.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(16892.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(17170.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(17615.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18215.3,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18787.3,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(19665.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(20134.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(20634.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(20912.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(21734.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(22734.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(23234.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(23512.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>再将上面这些数字异或</p><p>那么一共异或nums1[0]的次数为n次，如果n为偶数那么这些个nums1[0]的异或和为0，如果为奇数就为nums1[0]</p><p>这个规则可以类推到所有的nums1和nums2中的数字</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;所有数对的异或和&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/bitwise-xor-of-all-pairings/&quot;&gt;2425.所有数对的异或和&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;异或操作，同0异1&lt;/p&gt;
&lt;p&gt;异或满足交换律&lt;/</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>264.丑数II</title>
    <link href="http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/264.%E4%B8%91%E6%95%B0II/"/>
    <id>http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/264.%E4%B8%91%E6%95%B0II/</id>
    <published>2022-10-04T14:06:27.000Z</published>
    <updated>2022-10-04T14:09:23.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="丑数ii"><a href="https://leetcode.cn/problems/ugly-number-ii/">264.丑数II</a></h1><p><a href="/2022/10/4/LeetCode刷题/17.09.第k个数/index.html">17.09.第k个数</a></p><p>原题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;丑数ii&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/ugly-number-ii/&quot;&gt;264.丑数II&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;/2022/10/4/LeetCode刷题/17.09.第k个数/index.h</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>921.使括号有效的最少添加</title>
    <link href="http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/921.%E4%BD%BF%E6%8B%AC%E5%8F%B7%E6%9C%89%E6%95%88%E7%9A%84%E6%9C%80%E5%B0%91%E6%B7%BB%E5%8A%A0/"/>
    <id>http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/921.%E4%BD%BF%E6%8B%AC%E5%8F%B7%E6%9C%89%E6%95%88%E7%9A%84%E6%9C%80%E5%B0%91%E6%B7%BB%E5%8A%A0/</id>
    <published>2022-10-04T13:56:27.000Z</published>
    <updated>2022-10-04T13:58:03.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使括号有效的最少添加"><a href="https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/">921.使括号有效的最少添加</a></h1><p>括号匹配类问题，首先想到栈</p><p>一个栈，存放（，碰到（就将其入栈，如果碰到）如果栈不为空就将（）匹配，如果栈为空ans+1</p><p>最后返回stack的size+ans作为最终答案</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使括号有效的最少添加&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/&quot;&gt;921.使括号有效的最少添加&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;括号匹配类问题，首先想到栈&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>940.不同的子序列II</title>
    <link href="http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/940.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/"/>
    <id>http://example.com/2022/10/04/LeetCode%E5%88%B7%E9%A2%98/940.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97II/</id>
    <published>2022-10-04T13:56:27.000Z</published>
    <updated>2022-10-21T01:19:54.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不同的子序列ii"><a href="https://leetcode.cn/problems/distinct-subsequences-ii/">940.不同的子序列II</a></h1><p>题目使用mod进行取模的原因防止计算时出现溢出</p><p>为什么是1e9+7，因为相加时防止int类型溢出，相乘防止long类型溢出</p><p>同时当数值比mod小的时候，取余数，对结果不会有影响。</p><p>加减法mod顺序任意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distinctSubseqII</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="type">int</span>[] repeat = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">newAdd</span> <span class="operator">=</span> ans + <span class="number">1</span>;</span><br><span class="line">        ans = (ans + newAdd) % MOD;</span><br><span class="line">        ans = (ans - repeat[c - <span class="string">'a'</span>] + MOD) % MOD;<span class="comment">//加MOD，不然可能出现负数</span></span><br><span class="line">        repeat[c - <span class="string">'a'</span>] = newAdd;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>dp[i]表示前i个字符可以组成的不同非空子序列的个数</p><p>dp[i+1]=dp[i]+newAdd-repeat</p><p>滚动存储用ans保存即可</p><p>对于字母c，新增的是在原本ans后面加这个字母，和这个字母c,所以newAdd=ans+1</p><p>repeat[26]表示以字母结尾的重复的个数，就正好是上一个c新增的子序列的个数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;不同的子序列ii&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/distinct-subsequences-ii/&quot;&gt;940.不同的子序列II&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;题目使用mod进行取模的原因防止计算时出现溢出&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
</feed>
