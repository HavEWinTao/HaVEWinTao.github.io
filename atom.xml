<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>樊tastic~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-27T02:37:13.419Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>樊tastic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OfferII.91.粉刷房子</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.91.%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.91.%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/</id>
    <published>2022-06-27T02:32:27.000Z</published>
    <updated>2022-06-27T02:37:13.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="offerii.91.粉刷房子">OfferII.91.粉刷房子</h1><h2 id="题目描述">题目描述</h2><p>假如有一排房子，共n个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同</p><p>每个房子粉刷成不同颜色的花费是以一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 2322.4 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span>的正整数矩阵costs来表示</p><p>例如，costs[0][0]表示第0号房子粉刷成红色的成本花费；costs[1][2]表示第1号房子粉刷成绿色的花费，以此类推</p><p>请计算出粉刷完所有房子最少的花费成本</p><h2 id="解题思路">解题思路</h2><p>第i号房子和第i-1号房子的颜色必须不同，因此当第i号房子被粉刷成某一种颜色时，第i−1号房子只能被粉刷成另外两种颜色之一</p><p>当第i号房子分别被粉刷成三种颜色时，粉刷第0号房子到第i号房子的最小花费成本计算如下：</p><pre><code>dp[i][0]=min(dp[i−1][1],dp[i−1][2])+costs[i][0]dp[i][1]=min(dp[i−1][0],dp[i−1][2])+costs[i][1]dp[i][2]=min(dp[i−1][0],dp[i−1][1])+costs[i][2]</code></pre><p>三种颜色的情况可以合并为一个状态转移方程，对于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="11.064ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4890.1 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(2611.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3234.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(4290.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>和0&lt;=j&lt;3，状态转移方程如下：</p><pre><code>dp[i][j]=min(dp[i−1][(j+1)mod3],dp[i−1][(j+2)mod3])+costs[i][j]</code></pre><p>计算结束时，dp[n−1]中的最小值即为粉刷所有房子的最小花费成本</p><p>当i&gt;=1时，由于dp[i]的计算只和dp[i−1]有关，因此可以使用滚动数组优化空间，将空间复杂度降低到O(1)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;offerii.91.粉刷房子&quot;&gt;OfferII.91.粉刷房子&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;假如有一排房子，共n个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，需要粉刷所有的房子并且使其相邻的两个房子颜色不能</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>OfferII.29.排序的循环链表</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.29.%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/OfferII.29.%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</id>
    <published>2022-06-27T02:21:27.000Z</published>
    <updated>2022-06-27T02:31:20.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="offerii.29.排序的循环链表">OfferII.29.排序的循环链表</h1><h2 id="题目描述">题目描述</h2><p>给定循环单调非递减列表中的一个点，写一个函数向这个列表中插入一个新元素insertVal，使这个列表仍然是循环升序的</p><p>给定的可以是这个列表中任意一个顶点的指针，并不一定是这个列表中最小元素的指针</p><p>如果有多个满足条件的插入位置，可以选择任意一个位置插入新的值，插入后整个列表仍然保持有序</p><p>如果列表为空（给定的节点是null），需要创建一个循环有序列表并返回这个节点。否则。请返回原先给定的节点</p><h2 id="解题思路">解题思路</h2><p>对于只有一个结点或链表为空的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) {</span><br><span class="line">    insertNode.next = insertNode;</span><br><span class="line">    <span class="keyword">return</span> insertNode;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (head.next == head) {</span><br><span class="line">    head.next = insertNode;</span><br><span class="line">    insertNode.next = head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>对于常规情况，应该找到结点插入的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">Node</span> <span class="variable">cursor</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span> (cursor != head) {</span><br><span class="line">    <span class="keyword">if</span> (insertVal &gt;= parent.val &amp;&amp; insertVal &lt;= cursor.val) {</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (parent.val &gt; cursor.val) {</span><br><span class="line">        <span class="keyword">if</span> (insertVal &gt; parent.val || insertVal &lt; cursor.val) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    parent = parent.next;</span><br><span class="line">    cursor = cursor.next;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>插入的结点应该在parent后面，parent总是在cursor前一个，如果parent&lt;=insert&lt;=cursor,parent就是插入位置</p><p>但是这是常规情况，如果insert比原链表的最大值大或比最小值小呢，找到链表的末尾(parent&gt;cursor),然后做判断，可以得到插入位置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;offerii.29.排序的循环链表&quot;&gt;OfferII.29.排序的循环链表&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定循环单调非递减列表中的一个点，写一个函数向这个列表中插入一个新元素insertVal，使这个列表仍然是循环升序的&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2311.小于等于K的最长二进制子序列</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/2311.%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EK%E7%9A%84%E6%9C%80%E9%95%BF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/2311.%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EK%E7%9A%84%E6%9C%80%E9%95%BF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2022-06-27T02:07:27.000Z</published>
    <updated>2022-06-27T02:19:32.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小于等于k的最长二进制子序列">2311.小于等于K的最长二进制子序列</h1><h2 id="题目描述">题目描述</h2><p>一个二进制字符串s和一个正整数k</p><p>返回s的最长子序列，且该子序列对应的二进制数字小于等于k</p><p>注意：</p><pre><code>子序列可以有前导0空字符串视为0子序列是指从一个字符串中删除零个或者多个字符后，不改变顺序得到的剩余字符序列</code></pre><h2 id="解题思路">解题思路</h2><p>这题过了，但是写麻烦了，只能说代码又臭又长，时间复杂度还高</p><p>前面的0都可以保留，然后找到一个1的位置，判断以该位置为起始位置的子串能保留多少位(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>)</p><hr><p><strong>只有1才对数的大小做贡献</strong></p><p>为什么从后往前遍历呢？因为后位的1的贡献一定把比前位的1的贡献小，即使后位选上后导致前位不能选，也不会对结果产生影响</p><pre><code>如：s="0111000"，k是17，从后往前遍历，8选上了，这样的话16就不能选了，但是对答案没影响再如：s="0011111",k=17,从后往前遍历，1,2,4,8都选上了，这样的最后答案中1的位数比单选16和8要多</code></pre><p>从低位到高位遍历s（反向遍历s），记需要移除的1的个数为removed：</p><p>若当前位为0，可保留；</p><p>若当前位为1，分类判断：</p><pre><code>计入当前位1，数字总和依然&lt;=k，可保留；计入当前位1，数字总和&gt;k，不可保留，removed+1</code></pre><p>最终返回s的总长度减去需要删除的1的个数，即len(s)−removed</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小于等于k的最长二进制子序列&quot;&gt;2311.小于等于K的最长二进制子序列&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个二进制字符串s和一个正整数k&lt;/p&gt;
&lt;p&gt;返回s的最长子序列，且该子序列对应的二进制数字小于等于k&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="贪心" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>710.黑名单中的随机数</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/710.%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/710.%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2022-06-27T01:51:27.000Z</published>
    <updated>2022-06-27T02:03:41.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑名单中的随机数">710.黑名单中的随机数</h1><h2 id="题目描述">题目描述</h2><p>给定一个整数n和一个无重复黑名单整数数组blacklist</p><p>设计一种算法，从[0,n-1]范围内的任意整数中选取一个未加入黑名单blacklist的整数</p><p>任何在上述范围内且不在黑名单blacklist中的整数都应该有同等的可能性被返回</p><p>优化你的算法，使它最小化调用语言内置随机函数的次数</p><p>实现Solution类:</p><pre><code>Solution(int n, int[] blacklist)初始化整数n和被加入黑名单blacklist的整数int pick()返回一个范围为[0,n-1]且不在黑名单blacklist中的随机整数</code></pre><h2 id="解题思路">解题思路</h2><p>一个整数n,一个黑名单，黑名单中所有数都小于n，并且黑名单中所有数都不相同</p><p>假设黑名单中数字的个数为m，那么能够返回的数一共有n-m个</p><p>因为要优化调用随机函数的次数，可以将所有的数映射到[0~n-m）的区间上，这样调用一次random就可以返回符合条件的随机数了</p><p>用一个map，key是[0~n-m)，value是要对应的随机数</p><p>构建map：</p><pre><code>对于不在黑名单中的数，value=key对于在黑名单中的数，如果该数大于n-m就可以忽略了，存到set中如果该数小于n-m应该把这个数映射成[n-m,n)中不是黑名单的数，用set判断因为黑名单数量m和n是确定的，一一映射后能够保持随机性</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pick</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(bound);</span><br><span class="line">    <span class="keyword">return</span> b2w.getOrDefault(x, x);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;黑名单中的随机数&quot;&gt;710.黑名单中的随机数&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个整数n和一个无重复黑名单整数数组blacklist&lt;/p&gt;
&lt;p&gt;设计一种算法，从[0,n-1]范围内的任意整数中选取一个未加入黑名单bla</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>522.最长特殊序列II</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/522.%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97II/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/522.%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97II/</id>
    <published>2022-06-27T01:34:27.000Z</published>
    <updated>2022-06-27T01:49:52.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长特殊序列ii">522.最长特殊序列II</h1><h2 id="题目描述">题目描述</h2><p>给定字符串列表strs，返回其中最长的特殊序列。如果最长特殊序列不存在，返回-1</p><p>特殊序列定义如下：</p><pre><code>该序列为某字符串独有的子序列（即不能是其他字符串的子序列）</code></pre><p>s的子序列可以通过删去字符串s中的某些字符实现</p><h2 id="解题思路">解题思路</h2><p>对于字符串i来说，如果他不是所有其他字符串的子串，那么他就是一个特殊字符串</p><p>对于strs中的所有字符串，走一遍遍历，就可以判断出最长的特殊序列</p><p>怎么判断字符串s是不是字符串t的子串呢，如果s是t的子串，那么s中的所有字符都会在t中按顺序出现</p><p>双指针，如果指向s中的字母和当前指向t的字母不相同，那t的指针后移，如果相同那么s和t都后移</p><p>最后判断指向s的指针是否在s末尾了，如果再末尾了就证明是子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断s是否是t的子串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubseq</span><span class="params">(String s, String t)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">ptS</span> <span class="operator">=</span> <span class="number">0</span>, ptT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptS &lt; s.length() &amp;&amp; ptT &lt; t.length()) {</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(ptS) == t.charAt(ptT)) {</span><br><span class="line">            ++ptS;</span><br><span class="line">        }</span><br><span class="line">        ++ptT;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">return</span> <span class="variable">ptS</span> <span class="operator">=</span>= s.length();</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最长特殊序列ii&quot;&gt;522.最长特殊序列II&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定字符串列表strs，返回其中最长的特殊序列。如果最长特殊序列不存在，返回-1&lt;/p&gt;
&lt;p&gt;特殊序列定义如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>515.在每个树行中找最大值</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/515.%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/515.%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-06-27T01:32:27.000Z</published>
    <updated>2022-06-27T01:33:41.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在每个树行中找最大值">515.在每个树行中找最大值</h1><h2 id="题目描述">题目描述</h2><p>给定一棵二叉树的根节点root ，请找出该二叉树中每一层的最大值</p><h2 id="解题思路">解题思路</h2><p>BFS，遍历每层的时候记录最大值，记录到ans中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在每个树行中找最大值&quot;&gt;515.在每个树行中找最大值&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一棵二叉树的根节点root ，请找出该二叉树中每一层的最大值&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;BFS，遍</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>513.找树左下角的值</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/</id>
    <published>2022-06-27T01:30:27.000Z</published>
    <updated>2022-06-27T01:31:58.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找树左下角的值">513.找树左下角的值</h1><h2 id="题目描述">题目描述</h2><p>给定一个二叉树的根节点root，请找出该二叉树的最底层最左边节点的值</p><p>假设二叉树中至少有一个节点</p><h2 id="解题思路">解题思路</h2><p>BFS找到最后一层，遍历中queue中第一个元素就是该层最左边的结点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;找树左下角的值&quot;&gt;513.找树左下角的值&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个二叉树的根节点root，请找出该二叉树的最底层最左边节点的值&lt;/p&gt;
&lt;p&gt;假设二叉树中至少有一个节点&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;解</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>508.出现次数最多的子树元素和</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/508.%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/508.%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/</id>
    <published>2022-06-27T01:26:27.000Z</published>
    <updated>2022-06-27T01:28:40.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出现次数最多的子树元素和">508.出现次数最多的子树元素和</h1><h2 id="题目描述">题目描述</h2><p>一个二叉树的根结点root，请返回出现次数最多的子树元素和</p><p>如果有多个元素出现的次数相同，返回所有出现次数最多的子树元素和（不限顺序）</p><p>一个结点的「子树元素和」定义为以该结点为根的二叉树上所有结点的元素之和（包括结点本身）</p><h2 id="解题思路">解题思路</h2><p>DFS求和，并且将和以及它出现的次数保存起来，然后返回出现次数最多的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> root.val + getSum(root.left) + getSum(root.right);</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> cntSum.getOrDefault(sum, <span class="number">0</span>);</span><br><span class="line">    cntSum.put(sum, cnt + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;出现次数最多的子树元素和&quot;&gt;508.出现次数最多的子树元素和&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个二叉树的根结点root，请返回出现次数最多的子树元素和&lt;/p&gt;
&lt;p&gt;如果有多个元素出现的次数相同，返回所有出现次数最多的子树元</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>30.串联所有单词的子串</title>
    <link href="http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/"/>
    <id>http://example.com/2022/06/27/LeetCode%E5%88%B7%E9%A2%98/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/</id>
    <published>2022-06-27T01:21:27.000Z</published>
    <updated>2022-06-27T01:25:11.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="串联所有单词的子串">30.串联所有单词的子串</h1><h2 id="题目描述">题目描述</h2><p>给定一个字符串s和一些长度相同的单词words</p><p>找出s中恰好可以由words中所有单词串联形成的子串的起始位置</p><p>注意子串要与words中的单词完全匹配，中间不能有其他字符，但不需要考虑words中单词串联的顺序。</p><h2 id="解题思路">解题思路</h2><p>words中可能是有重复单词的，所以用set不行，可以用map，key是words中的字符串，value是字符串出现的次数</p><p>（如果考虑words中的顺序的话就得用list了，但本题不考虑）</p><p>从字符串s的第一个字母开始遍历，判断（judge），如果返回true，就该起始位置加入到ans中</p><p>judge：</p><pre><code>判断该index起始的子串能不能与words完全匹配</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;串联所有单词的子串&quot;&gt;30.串联所有单词的子串&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个字符串s和一些长度相同的单词words&lt;/p&gt;
&lt;p&gt;找出s中恰好可以由words中所有单词串联形成的子串的起始位置&lt;/p&gt;
&lt;p&gt;注意</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>1089.复写零</title>
    <link href="http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/1089.%E5%A4%8D%E5%86%99%E9%9B%B6/"/>
    <id>http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/1089.%E5%A4%8D%E5%86%99%E9%9B%B6/</id>
    <published>2022-06-17T12:14:27.000Z</published>
    <updated>2022-06-17T12:18:48.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复写零">1089.复写零</h1><h2 id="题目描述">题目描述</h2><p>一个长度固定的整数数组arr，将该数组中出现的每个零都复写一遍，并将其余的元素向右平移</p><p>注意：不要在超过该数组长度的位置写入元素</p><p>要求：请对输入的数组<strong>就地</strong>进行上述修改，不要从函数返回任何东西</p><h2 id="解题思路">解题思路</h2><p>难点在就地修改</p><p>先遍历一遍，判断复写零后的数组占原数组中的几个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt; n) {</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] == <span class="number">0</span>) {</span><br><span class="line">        index += <span class="number">2</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        index++;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>i就是原数组的下标</p><p>然后需要对最后一个数(arr[i])进行判断,因为在新数组中可能是00也可能是0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == <span class="number">0</span> &amp;&amp; index == n) {</span><br><span class="line">    arr[right--] = <span class="number">0</span>;</span><br><span class="line">    arr[right--] = <span class="number">0</span>;</span><br><span class="line">    i--;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    arr[right--] = arr[i--];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>然后将i和right向前遍历得到复写0后的数组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;复写零&quot;&gt;1089.复写零&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个长度固定的整数数组arr，将该数组中出现的每个零都复写一遍，并将其余的元素向右平移&lt;/p&gt;
&lt;p&gt;注意：不要在超过该数组长度的位置写入元素&lt;/p&gt;
&lt;p&gt;要求：</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>1051.高度检查器</title>
    <link href="http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/1051.%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/"/>
    <id>http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/1051.%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/</id>
    <published>2022-06-17T12:09:27.000Z</published>
    <updated>2022-06-17T12:13:33.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高度检查器">1051.高度检查器</h1><h2 id="题目描述">题目描述</h2><p>学生需要按照非递减的高度顺序排成一行</p><p>排序后的高度情况用整数数组expected表示，其中expected[i]是预计排在这一行中第i位的学生的高度（下标从0开始）</p><p>一个整数数组heights，表示当前学生站位的高度情况。heights[i]是这一行中第i位学生的高度（下标从0开始）</p><p>返回满足 heights[i] != expected[i] 的 下标数量 。</p><h2 id="解题思路">解题思路</h2><p>注意<strong>1&lt;=heights.length&lt;=100</strong></p><p>所以可以用桶排序</p><p>先找到最高的，确定桶的数目，然后记录每个高度的学生的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= max; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucket[i]; j++) {</span><br><span class="line">        <span class="keyword">if</span> (heights[index] != i) {</span><br><span class="line">            ans++;</span><br><span class="line">        }</span><br><span class="line">        index++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure><p>遍历得到ans</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高度检查器&quot;&gt;1051.高度检查器&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;学生需要按照非递减的高度顺序排成一行&lt;/p&gt;
&lt;p&gt;排序后的高度情况用整数数组expected表示，其中expected[i]
是预计排在这一行中第i位的学</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="桶排序" scheme="http://example.com/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>890. 查找和替换模式</title>
    <link href="http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/890.%20%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/890.%20%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-17T12:05:27.000Z</published>
    <updated>2022-06-17T12:08:22.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找和替换模式">890. 查找和替换模式</h1><h2 id="题目描述">题目描述</h2><p>有一个单词列表words和一个模式 pattern，想知道words中的哪些单词与模式匹配</p><p>单词与模式的字母间形成双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母(映射的字母可以相同，如a--a)</p><p>返回words中与给定模式匹配的单词列表</p><p>可以按任何顺序返回答案</p><h2 id="解题思路">解题思路</h2><p>用两个map记录这个双射</p><p>当双射存在冲突时返回false</p><p>如果双射构建成功返回true</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查找和替换模式&quot;&gt;890. 查找和替换模式&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;有一个单词列表words和一个模式 pattern，想知道words中的哪些单词与模式匹配&lt;/p&gt;
&lt;p&gt;单词与模式的字母间形成双射：每个字母映射到另</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>719.找出第K小的数对距离</title>
    <link href="http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/719.%E6%89%BE%E5%87%BA%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AF%B9%E8%B7%9D%E7%A6%BB/"/>
    <id>http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/719.%E6%89%BE%E5%87%BA%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AF%B9%E8%B7%9D%E7%A6%BB/</id>
    <published>2022-06-17T11:55:27.000Z</published>
    <updated>2022-06-17T12:03:29.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找出第k小的数对距离">719.找出第K小的数对距离</h1><h2 id="题目描述">题目描述</h2><p>数对(a,b)由整数a和b组成，其数对距离定义为a和b的绝对差值</p><p>一个整数数组nums和一个整数k，数对由nums[i]和nums[j]组成且满足0&lt;=i&lt;j&lt;nums.length</p><p>返回所有数对距离中第k小的数对距离</p><h2 id="解题思路">解题思路</h2><p>先排序，差值最大为nums[n-1]，最小为0(不确定，但肯定大于0),对这个差值进行二分</p><p>找到小于这个差值的所有数对的个数(可以类似于<a href="/2022/06/17/LeetCode刷题/532.数组中的k-diff数对/index.html">532.数组中的k-diff数对</a>来二分计算)</p><p>最后可以确定个数正好为k的差值大小，就是ans</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;找出第k小的数对距离&quot;&gt;719.找出第K小的数对距离&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;数对(a,b)由整数a和b组成，其数对距离定义为a和b的绝对差值&lt;/p&gt;
&lt;p&gt;一个整数数组nums和一个整数k，数对由nums[i]和nu</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>532.数组中的k-diff数对</title>
    <link href="http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/532.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84k-diff%E6%95%B0%E5%AF%B9/"/>
    <id>http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/532.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84k-diff%E6%95%B0%E5%AF%B9/</id>
    <published>2022-06-17T11:49:27.000Z</published>
    <updated>2022-06-17T11:54:33.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组中的k-diff数对">532.数组中的k-diff数对</h1><h2 id="题目描述">题目描述</h2><p>一个整数数组nums和一个整数k，在数组中找出不同的k-diff数对，并返回不同的k-diff数对的数目</p><p>k-diff数对定义为一个整数对(nums[i],nums[j])，并满足下述全部条件：</p><ul><li>0 &lt;= i, j &lt; nums.length</li><li>i != j</li><li>nums[i] - nums[j] == k</li></ul><h2 id="解题思路">解题思路</h2><p>数组长度记为n,一个数组中共有数对n(n-1)，对数组进行排序并不影响数对的信息</p><p>所以先对数对进行排序</p><p>然后从第一个数开始nums[i],在nums[i+1,n-1]中查找k+nums[i]</p><pre><code>因为已经排序,nums[j]&gt;nums[i],(nums[j]-nums[i]=k)，所以应查找的数为k+nums[i]因为已经排序，所以查找可以使用二分查找</code></pre><p>因为题目要求找出数组中不同的k-diff数对,所以应该跳过相同的nums[i]，从下一个不同的数继续查找</p><p>记录ans并返回</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组中的k-diff数对&quot;&gt;532.数组中的k-diff数对&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个整数数组nums和一个整数k，在数组中找出不同的k-diff数对，并返回不同的
k-diff数对的数目&lt;/p&gt;
&lt;p&gt;k-di</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>498.对角线遍历</title>
    <link href="http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/498.%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/"/>
    <id>http://example.com/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/498.%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/</id>
    <published>2022-06-17T11:39:27.000Z</published>
    <updated>2022-06-17T11:47:54.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对角线遍历">498.对角线遍历</h1><h2 id="题目描述">题目描述</h2><p>给你一个大小为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="6.11ex" height="1.136ex" role="img" focusable="false" viewBox="0 -491 2700.4 502"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(2100.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>的矩阵mat，以对角线遍历的顺序，用一个数组返回这个矩阵中的所有元素</p><img src="/2022/06/17/LeetCode%E5%88%B7%E9%A2%98/498.%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/498.findDiagonalOrder.jpg" class="" title="对角线遍历"><h2 id="解题思路">解题思路</h2><p>从i,j都为0开始，直到i,j为m,n</p><p>有右上斜线或左下斜线两种方向，用一个flag标记走的方向，完成对i和j的更改</p><p>对于更改完的i,j坐标，可能存在超出边界的情况</p><p>右上方向斜线有三种</p><ol type="1"><li>i&lt;0，但是j在范围内</li><li>i&lt;0，j==n</li><li>j==n，但是i在范围内</li></ol><p>左下方向斜线有三种</p><ol type="1"><li>j&lt;0,但是i在范围内</li><li>j&lt;0,i==m</li><li>i==m,打算j在范围内</li></ol><p>对着六种情况的坐标进行更改最后得到ans</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对角线遍历&quot;&gt;498.对角线遍历&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你一个大小为&lt;span class=&quot;math inline&quot;&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg st</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>497.非重叠矩形中的随机点</title>
    <link href="http://example.com/2022/06/11/LeetCode%E5%88%B7%E9%A2%98/497.%E9%9D%9E%E9%87%8D%E5%8F%A0%E7%9F%A9%E5%BD%A2%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%82%B9/"/>
    <id>http://example.com/2022/06/11/LeetCode%E5%88%B7%E9%A2%98/497.%E9%9D%9E%E9%87%8D%E5%8F%A0%E7%9F%A9%E5%BD%A2%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%82%B9/</id>
    <published>2022-06-11T03:31:27.000Z</published>
    <updated>2022-06-11T03:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="非重叠矩形中的随机点">497.非重叠矩形中的随机点</h1><h2 id="题目描述">题目描述</h2><p>给定一个由非重叠的轴对齐矩形的数组rects，其中<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="21.793ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9632.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(1350,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1711,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2180,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2458,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2803,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3358.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4414.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(4692.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5548.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5993.2,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6749.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7193.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8092.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(8537.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9354.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>表示<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.413ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2834.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1245,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1689.6,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2445.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>是第i个矩形的左下角点，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.648ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2938.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1288,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1732.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2549.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>是第i个矩形的右上角点</p><p>设计一个算法来随机挑选一个被某一矩形覆盖的整数点。矩形周长上的点也算做是被矩形覆盖。所有满足要求的点必须等概率被返回。在给定的矩形覆盖的空间内的任何整数点都有可能被返回</p><h2 id="解题思路">解题思路</h2><p>遍历rects记录每个正方形包含的点的个数，保存到数组中（递增），总点的个数记为sum</p><p>生成0~sum的随机数random，通过二分查找找到生成的随机点应该位于哪个长方形中</p><p>将random减去他前面的的点数的和，然后random就是在当前长方形的点，以左下角为基准点，除以每行的点数得到纵坐标便宜，对每行的点数取余就是横坐标的偏移</p><p>将偏移量与基准点作为和就是返回的随机点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;非重叠矩形中的随机点&quot;&gt;497.非重叠矩形中的随机点&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个由非重叠的轴对齐矩形的数组rects，其中&lt;span class=&quot;math inline&quot;&gt;&lt;mjx-container class</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2294.划分数组使最大差为K</title>
    <link href="http://example.com/2022/06/07/LeetCode%E5%88%B7%E9%A2%98/2294.%E5%88%92%E5%88%86%E6%95%B0%E7%BB%84%E4%BD%BF%E6%9C%80%E5%A4%A7%E5%B7%AE%E4%B8%BAK/"/>
    <id>http://example.com/2022/06/07/LeetCode%E5%88%B7%E9%A2%98/2294.%E5%88%92%E5%88%86%E6%95%B0%E7%BB%84%E4%BD%BF%E6%9C%80%E5%A4%A7%E5%B7%AE%E4%B8%BAK/</id>
    <published>2022-06-07T03:17:27.000Z</published>
    <updated>2022-06-07T03:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="划分数组使最大差为k">2294.划分数组使最大差为K</h1><h2 id="题目描述">题目描述</h2><p>一个整数数组nums和一个整数k。你可以将nums划分成一个或多个子序列，使nums中的每个元素都恰好出现在一个子序列中。</p><p>在满足每个子序列中最大值和最小值之间的差值最多为k的前提下，返回需要划分的最少子序列数目</p><p>子序列本质是一个序列，可以通过删除另一个序列中的某些元素（或者不删除）但不改变剩下元素的顺序得到</p><h2 id="解题思路">解题思路</h2><p>所有的子序列与原数组的顺序无关，子序列看做一个集合的话相对于原数组总是满足顺序条件的</p><p>所以可以对原数组排序，然后一遍遍历判断满足<strong>最大值和最小值之间的差值最多为k</strong>条件的即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;划分数组使最大差为k&quot;&gt;2294.划分数组使最大差为K&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个整数数组nums和一个整数k。你可以将
nums划分成一个或多个子序列，使nums中的每个元素都恰好出现在一个子序列中。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>给虚拟机固定IP</title>
    <link href="http://example.com/2022/06/07/%E5%85%B6%E4%BB%96/%E7%BB%99%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%BA%E5%AE%9AIP/"/>
    <id>http://example.com/2022/06/07/%E5%85%B6%E4%BB%96/%E7%BB%99%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%BA%E5%AE%9AIP/</id>
    <published>2022-06-07T03:17:27.000Z</published>
    <updated>2022-06-08T09:43:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="给虚拟机固定ip">给虚拟机固定IP</h1><p>用VMware的DHCP自动分配如果就启动一个虚拟机还好，启动多个ip会变，为了方便ssh连接，所以需要将ip固定住</p><p>根本不需要调整windows下网络适配器VMnet8，VMware中设置好了VMnet8的子网</p><p>需要先查看VMware Network Adapter VMnet8的ip</p><p>在虚拟机中修改<code>/etc/netplan/</code>中的配置文件<strong>network-manager-all</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span>     <span class="comment">#配置的网卡的名称</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.146</span><span class="number">.168</span><span class="string">/24</span>] <span class="comment">#静态ip地址和掩码</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span> <span class="comment">#关闭DHCP</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.146</span><span class="number">.2</span> <span class="comment">#网关地址</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">         <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>,<span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span>]<span class="comment">#DNS服务器地址</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br></pre></td></tr></table></figure><p>address直接给VMnet8的子网ip</p><p>网关将VMnet8的子网设置为2就行了</p><p>重启后就固定ip了</p><h2 id="vmnet8的规则">VMnet8的规则</h2><p>以本机的192.168.231.0网段为例：</p><p>第一个地址(192.168.231.1):静态地址，分配给了宿主机的VMware NetworkAdapter VMnet8适配器使用。</p><p>第二个地址(192.168.231.2):静态地址，分配给了NAT设备使用。</p><p>(192.168.231.3到192.168.231.127)静态地址，保留。</p><p>(192.168.231.128到192.168.231.254)：DHCP作用域地址范围，分配给虚拟机使用。</p><p>最后一个地址(192.168.231.255)广播地址。</p><p>VMware默认安装后的规则都是如此</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;给虚拟机固定ip&quot;&gt;给虚拟机固定IP&lt;/h1&gt;
&lt;p&gt;用VMware的DHCP自动分配如果就启动一个虚拟机还好，启动多个ip会变，为了方便ssh连接，所以需要将ip固定住&lt;/p&gt;
&lt;p&gt;根本不需要调整windows下网络适配器VMnet8，VMware中设置好</summary>
      
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>875.爱吃香蕉的珂珂</title>
    <link href="http://example.com/2022/06/07/LeetCode%E5%88%B7%E9%A2%98/875.%E7%88%B1%E5%90%83%E9%A6%99%E8%95%89%E7%9A%84%E7%8F%82%E7%8F%82/"/>
    <id>http://example.com/2022/06/07/LeetCode%E5%88%B7%E9%A2%98/875.%E7%88%B1%E5%90%83%E9%A6%99%E8%95%89%E7%9A%84%E7%8F%82%E7%8F%82/</id>
    <published>2022-06-07T03:06:27.000Z</published>
    <updated>2022-06-07T03:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爱吃香蕉的珂珂">875.爱吃香蕉的珂珂</h1><h2 id="题目描述">题目描述</h2><p>有n堆香蕉，第i堆中有piles[i]根香蕉。需要在h小时内吃完</p><p>珂珂可以决定她吃香蕉的速度k（单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉k根。如果这堆香蕉少于k根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉</p><p>返回她可以在h小时内吃掉所有香蕉的最小速度k（k为整数）</p><h2 id="解题思路">解题思路</h2><p>因为珂珂吃掉一堆的所有香蕉，一小时内不会再吃更多的香蕉，所以最小速度k的上限是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.946ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4838 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1979,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2368,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(2871,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3216,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3514,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3980,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(4449,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>假如<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.166ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 957.6 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mn" transform="translate(554,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span>满足条件，那么对于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="6.362ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 2812.1 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="msub" transform="translate(1854.6,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mn" transform="translate(554,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></span>一定满足条件，所以可以使用二分进行判断</p><p>需要判断对于k行不行，遍历piles得到总时间和h来判断</p><p>对于left=1和k=max(piles),如果mid=(left+k)/2可行，那么k=mid，如果不可行，那么left=mid+1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爱吃香蕉的珂珂&quot;&gt;875.爱吃香蕉的珂珂&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;有n堆香蕉，第i堆中有piles[i]根香蕉。需要在h小时内吃完&lt;/p&gt;
&lt;p&gt;珂珂可以决定她吃香蕉的速度k（单位：根/小时）。每个小时，她将会选择一堆</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>478.在圆内随机生成点</title>
    <link href="http://example.com/2022/06/07/LeetCode%E5%88%B7%E9%A2%98/478.%E5%9C%A8%E5%9C%86%E5%86%85%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E7%82%B9/"/>
    <id>http://example.com/2022/06/07/LeetCode%E5%88%B7%E9%A2%98/478.%E5%9C%A8%E5%9C%86%E5%86%85%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E7%82%B9/</id>
    <published>2022-06-07T02:57:27.000Z</published>
    <updated>2022-06-07T03:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在圆内随机生成点">478.在圆内随机生成点</h1><h2 id="题目描述">题目描述</h2><p>给定一个圆，在圆中产生均匀随机点</p><h2 id="解题思路">解题思路</h2><p>假设：<strong>语言提供的生成浮点数的API得到的结果是均匀的</strong></p><p>正常直接取半径范围的随机数是不可行的，因为题目要求在园内产生均匀随机点</p><ol type="1"><li><p>拒绝采样：</p><p>按正方形来算，然后产生随机点，不在圆内就舍弃重新生成随机点，直到点在圆内</p></li><li><p>分布函数</p><p>取半径范围的随机数从一维上来看是均匀的，但是在圆中不均匀，圆的面积是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="6.063ex" height="1.912ex" role="img" focusable="false" viewBox="0 -833.9 2680 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(792.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1792.4,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(484,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p><p>从<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.905ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2610.2 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1333.7,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(484,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2221.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>内随机再开平方，从而确保距离与面积比例一致</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在圆内随机生成点&quot;&gt;478.在圆内随机生成点&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个圆，在圆中产生均匀随机点&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;假设：&lt;strong&gt;语言提供的生成浮点数的API</summary>
      
    
    
    
    <category term="LeetCode刷题" scheme="http://example.com/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
</feed>
